<application>
  <component name="AppStorage">
    <histories>
      <item value="is Jar" />
      <item value="is Valid" />
      <item value="JAR MAGIC" />
      <item value="A default implementation of {@ link VFS } that works for most application servers ." />
      <item value="A class to wrap access to multiple class loaders making them work as one" />
      <item value="Provides a very simple API for accessing resources within an application server ." />
      <item value="Offline entity resolver for the i BATIS DT Ds" />
      <item value="Unless required by applicable law or agreed to in writing , software distributed under the License is distributed on an &quot; AS IS &quot; BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the License for the specific language governing permissions and limitations under the License ." />
      <item value="you may not use this file except in compliance with the License . You may obtain a copy of the License at" />
      <item value="Version 2.0 ( the &quot; License &quot;);" />
      <item value="Licensed under the Apache License" />
      <item value="Copyright 2009-2012 the original author or authors ." />
      <item value="/ Copyright 2009-2012 the original author or authors . Licensed under the Apache License , Version 2.0 ( the &quot; License &quot;); you may not use this file except in compliance with the License . You may obtain a copy of the License at http :// www . apache . org / licenses / LICENSE -2.0 Unless required by applicable law or agreed to in writing , software distributed under the License is distributed on an &quot; AS IS &quot; BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the License for the specific language governing permissions and limitations under the License . /" />
      <item value="invocation" />
      <item value="type Handlers" />
      <item value="type Handlers Package" />
      <item value="attribute" />
      <item value="expected single matching" />
      <item value="xpected single matching bean but found 33" />
      <item value="buttons . html" />
      <item value="Invalid Reference Exception" />
      <item value="partition" />
      <item value="topic" />
      <item value="0" />
      <item value="A Map to pass to the broker when this component is declared ." />
      <item value="Binds a queue to this exchange . Messages sent to this exchange will be placed on this queue by the broker if they contain a header that matches this binding ( key - value pair )." />
      <item value="Creates a headers exchange for producers to send messages to . Uses an existing exchange with the same name if it exists on the broker , or declares a new one . A headers exchange routes messages to all queues where a message header matches that specified in the binding of the queue . You can set up bindings here too ." />
      <item value="X DELAY" />
      <item value="The x - delay header ( outbound )." />
      <item value="he x - delay header ( outbound )." />
      <item value="NOTE stucture Type is int in qpid" />
      <item value="The 0-8 and 0-9-1 AMQP specifications do not define an Message class or interface . Instead , when performing an operation such as basic Publish the content is passed as a byte - array argument and additional properties are passed in as separate arguments . Spring AMQP defines a Message class as part of a more general AMQP domain model representation . The purpose of the Message class is to simply encapsulate the body and properties within a single instance so that the rest of the AMQP API can in turn be simpler ." />
      <item value="pattern" />
      <item value="no queue ' topic ' in vhost '/" />
      <item value="@ Rabbit Listener can have ' queues ' or ' bindings ' but not both" />
      <item value="The queues for this listener . The entries can be ' queue name ', ' property - placeholder keys ' or ' expressions '. Expression must be resolved to the queue name or {@ code Queue } object . Mutually exclusive with {@ link # bindings ()}" />
      <item value="@ return true if the exchange is to be declared as durable ." />
      <item value="/ If provided , the listener container for this listener will be added to a bean with this value as its name , of type {@ code Collection &lt; Message Listener Container &gt;}. This allows , for example , iteration over the collection to start / stop a subset of containers . @ return the bean name for the group . @ since 1.5 /" />
      <item value="/ When {@ code true }, a single consumer in the container will have exclusive use of the {@ link # queues ()}, preventing other consumers from receiving messages from the queues . When {@ code true }, requires a concurrency of 1. Default {@ code false }. @ return the {@ code exclusive } boolean flag . /" />
      <item value="exclusive" />
      <item value="Target" />
      <item value="Represents an argument used when declaring queues etc within a" />
      <item value="Defines a queue , the exchange it is to be bound to , and an optional binding key ; used" />
      <item value="A queue definition used within the bindings attribute of a {@ code Queue Binding }." />
      <item value="header" />
      <item value="topic" />
      <item value="direct" />
      <item value="fanout" />
      <item value="version 0-9-1" />
      <item value="AMQP protocol version mismatch" />
      <item value="Alias Query is useful for creating new alias or deleting existing ones" />
      <item value="Criteria" />
      <item value="ambiguous" />
      <item value="select By Order Id is ambiguous in Mapped Statements collection" />
      <item value="divide" />
    </histories>
  </component>
</application>