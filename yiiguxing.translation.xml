<application>
  <component name="AppStorage">
    <histories>
      <item value="assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;" />
      <item value="This function ensures that hashCodes that differ only by // constant multiples at each bit position have a bounded // number of collisions (approximately 8 at default load factor)." />
      <item value="Initialize the hashing mask value. We defer initialization until we * really need it." />
      <item value="init Hash Seed As Needed" />
      <item value="threshold" />
      <item value="inflate" />
      <item value="inflate Table" />
      <item value="Segment" />
      <item value="Shift value for indexing within segments." />
      <item value="Mask value for indexing into segments. The upper bits of a key's hash code are used to choose the segment." />
      <item value="Mask value for indexing into segments. The upper bits of a * key's hash code are used to choose the segment." />
      <item value="Mask value" />
      <item value="s 0" />
      <item value="Shift" />
      <item value="holds values which can't be initialized until after VM is booted." />
      <item value="ensure" />
      <item value="Returns the segment for the given index, creating it and * recording in segment table (via CAS) if not already present." />
      <item value="Returns the segment for the given index, creating it and * recording in segment table (via CAS) if not already present. *" />
      <item value="Spread bits to regularize both segment and index locations, // using variant of single-word Wang/Jenkins hash." />
      <item value="key with which the specified value is to be associated" />
      <item value="Maps the specified key to the specified value in this table. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key." />
      <item value="ensure Segment" />
      <item value="create segments and segments" />
      <item value="segment" />
      <item value="Find power-of-two sizes best matching arguments" />
      <item value="ALTERNATIVE HASHING" />
      <item value="Holder" />
      <item value="RETRIES BEFORE LOCK" />
      <item value="The maximum number of segments to allow; used to bound * constructor arguments. Must be power of two less than 1 &lt;&lt; 24." />
      <item value="SEGMENTS" />
      <item value="MAX SEGMENTS" />
      <item value="MIN SEGMENT TABLE CAPACITY" />
      <item value="MAXIMUM CAPACITY" />
      <item value="The default concurrency level for this table, used when not * otherwise specified in a constructor." />
      <item value="DEFAULT CONCURRENCY LEVEL" />
      <item value="DEFAULT INITIAL CAPACITY" />
      <item value="String Builder" />
      <item value="btn orange" />
      <item value="download" />
      <item value="An HTML multipart email. This class is used to send HTML formatted email. A text message can also be set for HTML unaware email clients, such as text-based email clients. This class also inherits from MultiPartEmail, so it is easy to add attachments to the email. To send an email in HTML, one should create a HtmlEmail, then use the setFrom(String), addTo(String) etc. methods. The HTML content can be set with the setHtmlMsg(String) method. The alternative text content can be set with setTextMsg(String). Either the text or HTML can be omitted, in which case the &quot;main&quot; part of the multipart becomes whichever is supplied rather than a multipart/alternative. Embedding Images and Media It is also possible to embed URLs, files, or arbitrary DataSources directly into the body of the mail: HtmlEmail he = new HtmlEmail(); File img = new File(&quot;my/image.gif&quot;); PNGDataSource png = new PNGDataSource(decodedPNGOutputStream); // a custom class StringBuffer msg = new StringBuffer(); msg.append(&quot;&lt;html&gt;&lt;body&gt;&quot;); msg.append(&quot;&lt;img src=cid:&quot;).append(he.embed(img)).append(&quot;&gt;&quot;); msg.append(&quot;&lt;img src=cid:&quot;).append(he.embed(png)).append(&quot;&gt;&quot;); msg.append(&quot;&lt;/body&gt;&lt;/html&gt;&quot;); he.setHtmlMsg(msg.toString()); // code to set the other email fields (not shown) Embedded entities are tracked by their name, which for Files is the filename itself and for URLs is the canonical path. It is an error to bind the same name to more than one entity, and this class will attempt to validate that for Files and URLs. When embedding a DataSource, the code uses the equals() method defined on the DataSources to make the determination." />
      <item value="Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in &quot;&lt;img src=../&gt;&quot; elements in the HTML code. This is done by replacing all img-src-elements with &quot;cid:&quot;-entries and embedding images in the email. For local files the class tries to either load them via an absolute path or - if available - use a relative path starting from a base directory. For files that are not found locally, the implementation tries to download the element and link it in. The image loading is done by an instance of DataSourceResolver which has to be provided by the caller." />
      <item value="A program element annotated &amp;#64;Deprecated is one that programmers * are discouraged from using, typically because it is dangerous, * or because a better alternative exists. Compilers warn when a * deprecated program element is used or overridden in non-deprecated code." />
      <item value="this affects the margin in the printer settings" />
      <item value="Make a map and return a function for checking if a key * is in that map." />
      <item value="Make a map and return a function for checking if a key" />
      <item value="-" />
      <item value="Get a PropertiesHolder that contains the actually visible properties * for a Locale, after merging all specified resource bundles. * Either fetches the holder from the cache or freshly loads it. * &lt;p&gt;Only used when caching resource bundle contents forever, i.e. * with cacheSeconds &lt; 0. Therefore, merged properties are always * cached forever." />
      <item value="Interceptor that allows for changing the current locale on every request, * via a configurable request parameter (default parameter name: &quot;locale&quot;)." />
      <item value="default Time Zone" />
      <item value="default Locale" />
    </histories>
  </component>
</application>