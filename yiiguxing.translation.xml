<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="We start with an index of -1 and increment early." />
      <item value="if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) { return dm.interceptor.invoke(this); }" />
      <item value="We need to create a method invocation..." />
      <item value="Proceed to the joinpoint through the interceptor chain." />
      <item value="Get the interception chain for this method." />
      <item value="Restore old proxy." />
      <item value="Must have come from TargetSource." />
      <item value="May be null. Get as late as possible to minimize the time we &quot;own&quot; the target, // in case it comes from a pool." />
      <item value="find Defined Equals And Hash Code Methods" />
      <item value="is Optimize" />
      <item value="/** * Set whether this config should be frozen. * &lt;p&gt;When a config is frozen, no advice changes can be made. This is * useful for optimization, and useful when we don't want callers to * be able to manipulate configuration after casting to Advised. */" />
      <item value="** * Subclasses may choose to implement this: for example, * to change the interfaces exposed. * &lt;p&gt;The default implementation is empty. * @param proxyFactory ProxyFactory that is already configured with * TargetSource and interfaces and will be used to create the proxy * immediately after this method returns */" />
      <item value="/** * Subclasses may choose to implement this: for example, * to change the interfaces exposed. * &lt;p&gt;The default implementation is empty. * @param proxyFactory ProxyFactory that is already configured with * TargetSource and interfaces and will be used to create the proxy * immediately after this method returns */" />
      <item value="should Proxy Target Class" />
      <item value="Expose the given target class for the specified bean, if possible." />
      <item value="has Introductions" />
      <item value="find Advisors That Can Apply" />
      <item value="found Aspect J Advice" />
      <item value="Eligible" />
      <item value="find Eligible Advisors" />
      <item value="candidate Advisors" />
      <item value="candidate" />
      <item value="Find all candidate Advisors to use in auto-proxying." />
      <item value="get Advices And Advisors For Bean" />
      <item value="Create proxy if we have advice." />
      <item value="advisor" />
      <item value="0" />
      <item value="Unit" />
      <item value="Volume" />
      <item value="Wrap the given bean if necessary, i.e. if it is eligible for being proxied." />
      <item value="/** * {@link org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator} * subclass that exposes AspectJ's invocation context and understands AspectJ's rules * for advice precedence when multiple pieces of advice come from the same aspect. *" />
      <item value="Bean Component" />
      <item value="pop" />
      <item value="register the final advisor" />
      <item value="register the pointcut" />
      <item value="configure the advisor" />
      <item value="create instance factory definition" />
      <item value="create the method factory bean" />
      <item value="advice Found Already" />
      <item value="We have to parse &quot;advice&quot; and all the advice kinds in one loop, to get the // ordering semantics right." />
      <item value="advice" />
      <item value="We have to parse &quot;advice&quot; and all the advice kinds in one loop, to get the" />
      <item value="Stack" />
      <item value="State" />
      <item value="/** * Simple {@link Stack}-based structure for tracking the logical position during * a parsing process. {@link Entry entries} are added to the stack at * each point during the parse phase in a reader-specific manner. * * &lt;p&gt;Calling {@link #toString()} will render a tree-style view of the current logical * position in the parse phase. This representation is intended for use in * error messages. * * @author Rob Harrop * @since 2.0 */" />
      <item value="use Class Proxying If Necessary" />
      <item value="/** * Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions} * created by the '{@code &lt;aop:config/&gt;}' tag. Will force class proxying if the * '{@code proxy-target-class}' attribute is set to '{@code true}'. * @see AopNamespaceUtils */" />
      <item value="composite Def" />
      <item value="parser Context" />
      <item value="nested Components" />
    </histories>
  </component>
</application>