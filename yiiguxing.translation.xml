<application>
  <component name="AppStorage">
    <histories>
      <item value="Scans for interfaces that declare they are feign clients (via @FeignClient). Configures component scanning directives for use with @Configuration classes." />
      <item value="Auto Configure Before" />
      <item value="Order is important here, last should be the default, first should be optional" />
      <item value="Conditional On Missing Class" />
      <item value="Indicates that a component is only eligible for registration when all specified conditions match. A condition is any state that can be determined programmatically before the bean definition is due to be registered (see Condition for details). The @Conditional annotation may be used in any of the following ways: as a type-level annotation on any class directly or indirectly annotated with @Component, including @Configuration classes as a meta-annotation, for the purpose of composing custom stereotype annotations as a method-level annotation on any @Bean method If a @Configuration class is marked with @Conditional, all of the @Bean methods, @Import annotations, and @ComponentScan annotations associated with that class will be subject to the conditions. NOTE: Inheritance of @Conditional annotations is not supported; any conditions from superclasses or from overridden methods will not be considered. In order to enforce these semantics, @Conditional itself is not declared as @Inherited; furthermore, any custom composed annotation that is meta-annotated with @Conditional must not be declared as @Inherited" />
      <item value="Indicates that a component is only eligible for registration when all specified conditions match.&#10;A condition is any state that can be determined programmatically before the bean definition is due to be registered (see Condition for details).&#10;The @Conditional annotation may be used in any of the following ways:&#10;as a type-level annotation on any class directly or indirectly annotated with @Component, including @Configuration classes&#10;as a meta-annotation, for the purpose of composing custom stereotype annotations&#10;as a method-level annotation on any @Bean method&#10;If a @Configuration class is marked with @Conditional, all of the @Bean methods, @Import annotations, and @ComponentScan annotations associated with that class will be subject to the conditions.&#10;NOTE: Inheritance of @Conditional annotations is not supported; any conditions from superclasses or from overridden methods will not be considered. In order to enforce these semantics, @Conditional itself is not declared as @Inherited; furthermore, any custom composed annotation that is meta-annotated with @Conditional must not be declared as @Inherited" />
      <item value="Enable Auto Configuration" />
      <item value="Autoconfiguration to be activated if Feign is in use and needs to be use Ribbon as a load balancer." />
      <item value="Annotation for interfaces declaring that a REST client with that interface should be created (e.g. for autowiring into another component). If ribbon is available it will be used to load balance the backend requests, and the load balancer can be configured using a @RibbonClient with the same name (i.e. value) as the feign client." />
      <item value="Autoconfiguration to be activated if Feign is in use and needs to be use Ribbon as a * load balancer." />
      <item value="If the accept-encoding header is present it disable transparent compression" />
      <item value="The OK HTTP client uses &quot;transparent&quot; compression." />
      <item value="Configures the Feign response compression." />
      <item value="org.springframework.cloud.openfeign.encoding @Configuration @EnableConfigurationProperties(FeignClientEncodingProperties.class) @ConditionalOnClass(Feign.class) @ConditionalOnBean(Client.class) @ConditionalOnProperty(value = &quot;feign.compression.response.enabled&quot;, matchIfMissing = false) @ConditionalOnMissingBean(type = &quot;okhttp3.OkHttpClient&quot;) @AutoConfigureAfter(FeignAutoConfiguration.class) public class FeignAcceptGzipEncodingAutoConfiguration extends Object" />
      <item value="org.springframework.cloud.openfeign.encoding @Configuration @EnableConfigurationProperties(FeignClientEncodingProperties.class) @ConditionalOnClass(Feign.class) @ConditionalOnBean(Client.class) @ConditionalOnProperty(value = &quot;feign.compression.response.enabled&quot;, matchIfMissing = false) @ConditionalOnMissingBean(type = &quot;okhttp3.OkHttpClient&quot;) @AutoConfigureAfter(FeignAutoConfiguration.class) public class FeignAcceptGzipEncodingAutoConfiguration&#10;extends Object" />
      <item value="qiudesheng" />
      <item value="media Size" />
      <item value="font Size" />
      <item value="status" />
      <item value="ver" />
      <item value="preserve" />
      <item value="is Ex Warehouse" />
      <item value="余额财务流水" />
      <item value="We're running in a tool (an IDE plugin for example). We need binding meta data but not a * functioning Injector. Do not inject members of instances. Do not load eager singletons. Do as * little as possible so our tools run nice and snappy. Injectors created in this stage cannot * be used to satisfy injections." />
      <item value="The stage we're running in." />
      <item value="Apply this to implementation classes when you want only one instance * (per {@link Injector}) to be reused for all injections for that binding." />
      <item value="Bob Lee" />
      <item value="crazybob@google.com" />
      <item value="Signifies that a public API (public class, method or field) is subject to incompatible changes, or even removal, in a future release. An API bearing this annotation is exempt from any compatibility guarantees made by its containing library. Note that the presence of this annotation implies nothing about the quality or performance of the API in question, only the fact that it is not &quot;API-frozen.&quot;&#10;It is generally safe for applications to depend on beta APIs, at the cost of some extra work during upgrades. However it is generally inadvisable for libraries (which get included on users' CLASSPATHs, outside the library developers' control) to do so." />
      <item value="Returns a splitter that uses the given single-character separator. For example," />
      <item value="Transfer Util" />
      <item value="Transfer" />
      <item value="Sequence工具" />
      <item value="不要使用GSON, 在对象稍大时非常缓慢." />
      <item value="CityHashUtil google的CityHash，比md5更高效，散列效果也很均衡" />
      <item value="zcg" />
      <item value="Concrete implementation should implement this method so that the configuration set via * {@link IClientConfig} (which in turn were set via Archaius properties) will be taken into consideration" />
      <item value="init With Niws Config" />
      <item value="No available alive servers after 10 tries from load balancer:" />
      <item value="yield" />
      <item value="Feature that determines whether encountering of unknown properties (ones that do not map to a property, and there is no &quot;any setter&quot; or handler that can handle it) should result in a failure (by throwing a JsonMappingException) or not. This setting only takes effect after all other handling methods for unknown properties have been tried, and property remains unhandled.&#10;Feature is enabled by default (meaning that a JsonMappingException will be thrown if an unknown property is encountered)." />
      <item value="Feature that determines whether encountering of unknown properties (ones that do not map to a property, and there is no &quot;any setter&quot; or handler that can handle it) should result in a failure (by throwing a JsonMappingException) or not. This setting only takes effect after all other handling methods for unknown properties have been tried, and property remains unhandled. Feature is enabled by default (meaning that a JsonMappingException will be thrown if an unknown property is encountered)." />
      <item value="caiqibang" />
      <item value="Log" />
      <item value="remove All Emojis" />
      <item value="// 申请访问需要知道申请访问哪个店铺，corpId必填" />
      <item value="Mini Program" />
      <item value="request.get Phone" />
      <item value="生成6位验证码" />
      <item value="TMP EXPIRE TIME" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="877" />
        <entry key="ENGLISH" value="877" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALAGASY" value="2" />
        <entry key="MALAY" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="11" />
        <entry key="SPANISH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>