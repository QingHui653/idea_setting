<application>
  <component name="AppStorage">
    <histories>
      <item value="NULL" />
      <item value="odd Even List" />
      <item value="odes 为节点总数。" />
      <item value="holds values which can't be initialized until after VM is booted." />
      <item value="Number of unsynchronized retries in size and containsValue * methods before resorting to locking. This is used to avoid * unbounded retries if tables undergo continuous modification * which would make it impossible to obtain an accurate result." />
      <item value="RETRIES" />
      <item value="RETRIES BEFORE LOCK" />
      <item value="slightly conservative" />
      <item value="The maximum number of segments to allow; used to bound * constructor arguments. Must be power of two less than 1 &lt;&lt; 24." />
      <item value="SCAN" />
      <item value="MAX SCAN RETRIES" />
      <item value="MAX SEGMENTS" />
      <item value="concurrency Level" />
      <item value="MIN SEGMENT TABLE CAPACITY" />
      <item value="The default concurrency level for this table, used when not * otherwise specified in a constructor." />
      <item value="DEFAULT CONCURRENCY LEVEL" />
      <item value="A hash table supporting full concurrency of retrievals and * adjustable expected concurrency for updates. This class obeys the * same functional specification as {@link java.util.Hashtable}, and * includes versions of methods corresponding to each method of * &lt;tt&gt;Hashtable&lt;/tt&gt;. However, even though all operations are * thread-safe, retrieval operations do &lt;em&gt;not&lt;/em&gt; entail locking, * and there is &lt;em&gt;not&lt;/em&gt; any support for locking the entire table * in a way that prevents all access. This class is fully * interoperable with &lt;tt&gt;Hashtable&lt;/tt&gt; in programs that rely on its * thread safety but not on its synchronization details." />
      <item value="find By Condition" />
      <item value="The iteration ordering method for this linked hash map:" />
      <item value="&lt;tt&gt;true&lt;/tt&gt; * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order." />
      <item value="for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order." />
      <item value="The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;" />
      <item value="The head of the doubly linked list." />
      <item value="Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order). Note that insertion order is not affected if a key is re-inserted into the map. (A key k is reinserted into a map m if m.put(k, v) is invoked when m.containsKey(k) would return true immediately prior to the invocation.)" />
      <item value="Comparator" />
      <item value="Tree Map" />
      <item value="comparator the comparator that will be used to order this map." />
      <item value="insertion-order" />
      <item value="access-order" />
      <item value="Constructs an empty &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance with the * specified initial capacity, load factor and ordering mode." />
      <item value="the ordering mode" />
      <item value="the ordering mode - &lt;tt&gt;true&lt;/tt&gt; for" />
      <item value="Dummy value to associate with an Object in the backing Map" />
      <item value="ignored (distinguishes this * constructor from other int, float constructor.)" />
      <item value="dummy" />
      <item value="initial Capacity" />
      <item value="Compares two keys using the correct comparison method for this TreeMap." />
      <item value="funding Company Id" />
      <item value="overrides of HashMap hook methods" />
      <item value="Transfers all entries to new table array. This method is called * by superclass resize. It is overridden for performance, as it is * faster to iterate using our linked list." />
      <item value="Rehash the table if the threshold is exceeded" />
      <item value="overflow-conscious code" />
      <item value="old Capacity" />
      <item value="hashSeed will be zero if alternative hashing is disabled." />
      <item value="0 x 7 FFFFFFF" />
      <item value="Constructs a new, empty hashtable with a default initial capacity (11)" />
      <item value="11" />
      <item value="an {@code int} value with a single one-bit, in the position * of the highest-order one-bit in the specified value, or zero if * the specified value is itself equal to zero." />
      <item value="highest One Bit" />
      <item value="MAXIMUM CAPACITY" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="515" />
        <entry key="ENGLISH" value="516" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>