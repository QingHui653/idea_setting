<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="this will be called after a failure occurs and we increment the counter //so we check that the count is less than or equals to too make sure //we try the next server the right number of times" />
      <item value="the retry policy from the load balancer" />
      <item value="//Check if we need to ask the load balancer for a new server. //Do this before we increment the counters because the first call to this method //is not a retry it is just an initial failure." />
      <item value="//this will be called after a failure occurs and we increment the counter //so we check that the count is less than or equals to too make sure //we try the next server the right number of times" />
      <item value="while parsing MappingNode" />
      <item value="org.yaml.snakeyaml.parser.ParserException: while parsing MappingNode" />
      <item value="Suffix" />
      <item value="instance Url Suffix" />
      <item value="/** * to classify a filter by type. Standard types in Zuul are &quot;pre&quot; for pre-routing filtering, * &quot;route&quot; for routing to an origin, &quot;post&quot; for post-routing filters, &quot;error&quot; for error handling. * We also support a &quot;static&quot; type for static responses see StaticResponseFilter. * Any filterType made be created or added and run by calling FilterProcessor.runFilters(type) * * @return A String representing that type */" />
      <item value="dispatcher Servlet" />
      <item value="875" />
      <item value="Check if bean definition exists in this factory." />
      <item value="is Singleton Currently In Creation" />
      <item value="bean Name" />
      <item value="Eagerly check singleton cache for manually registered singletons." />
      <item value="Handle aliasing..." />
      <item value="Create a deep copy, resolving any references for values." />
      <item value="is Converted" />
      <item value="apply Property Values" />
      <item value="needs Dep Check" />
      <item value="continue With Property Population" />
      <item value="has Instantiation Aware Bean Post Processors" />
      <item value="is Synthetic" />
      <item value="instantiate Class" />
      <item value="instantiate" />
      <item value="transformed" />
      <item value="instance" />
      <item value="Don't let calling code try to dereference the factory if the bean isn't a factory." />
      <item value="Allows post-processing of the bean factory in context subclasses." />
      <item value="Tell the subclass to refresh the internal bean factory." />
      <item value="it is available on ServletContext shutdown." />
      <item value="Store context in local instance variable, to guarantee that" />
      <item value="Find all ServletContext attributes which implement {@link DisposableBean} * and destroy them, removing all affected ServletContext attributes eventually." />
      <item value="@Configuration class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see @Bean javadoc for complete details." />
      <item value="Let subclasses do whatever initialization they like." />
      <item value="Ambiguous" />
      <item value="authentication" />
      <item value="跳转到新增 融物 编辑 页面" />
      <item value="request" />
      <item value="contains" />
    </histories>
  </component>
</application>