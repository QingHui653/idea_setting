<application>
  <component name="AppStorage">
    <histories>
      <item value="Determines whether the specified code point is a valid Unicode code point value ." />
      <item value="is Valid Code Point" />
      <item value="SURROGATES AREA" />
      <item value="Unicode Block" />
      <item value="Instances of this class represent particular subsets of the Unicode * character set. The only family of subsets defined in the * {@code Character} class is {@link Character.UnicodeBlock}. * Other portions of the Java API may define other subsets for their * own purposes." />
      <item value="The number of bits used to represent a char value in unsigned binary form, constant 16." />
      <item value="Instances of this class represent particular subsets of the Unicode character set. The only family of subsets defined in the Character class is Character.UnicodeBlock. Other portions of the Java API may define other subsets for their own purposes." />
      <item value="Subset" />
      <item value="The minimum value of a Unicode low-surrogate code unit in the UTF-16 encoding, constant '\uDC00'. A low-surrogate is also known as a trailing-surrogate." />
      <item value="MIN LOW SURROGATE" />
      <item value="General category &quot;Cn&quot; in the Unicode specification." />
      <item value="General category &quot;Ll&quot; in the Unicode specification." />
      <item value="LOWERCASE LETTER" />
      <item value="General category &quot;Lu&quot; in the Unicode specification." />
      <item value="UPPERCASE LETTER" />
      <item value="ASSIGNED" />
      <item value="UNASSIGNED" />
      <item value="MAX RADIX" />
      <item value="The constant value of this field is the smallest value of type" />
      <item value="'\ u 0000'" />
      <item value="Bin Sort" />
      <item value="Dichotomy" />
      <item value="Dichotomy Sort" />
      <item value="pivot" />
      <item value="partition" />
      <item value="value Of" />
      <item value="to String" />
      <item value="for Digit" />
      <item value="digit" />
      <item value="Character" />
      <item value="the integer {@code 1231} if this object represents * {@code true}; returns the integer {@code 1237} if this * object represents {@code false}." />
      <item value="Returns a hash code for this Boolean object." />
      <item value="Returns a Byte instance representing the specified byte value. If a new Byte instance is not required, this method should generally be used in preference to the constructor Byte(byte), as this method is likely to yield significantly better space and time performance since all byte values are cached." />
      <item value="Maximum array size is Integer.MAX_VALUE" />
      <item value="Returns the number of zero bits preceding the highest-order (&quot;leftmost&quot;) one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive int values x:" />
      <item value="Returns an int value with at most a single one-bit, in the position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified int value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero." />
      <item value="highest One Bit" />
      <item value="Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the System.getProperty(String) method. The string value of this property is then interpreted as an integer value and an Integer object representing this value is returned. Details of possible numeric formats can be found with the definition of getProperty. If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned. In other words, this method returns an Integer object equal to the value of: getInteger(nm, null)" />
      <item value="a hash code value for this object, equal to the * primitive {@code int} value represented by this * {@code Integer} object." />
      <item value="integer Cache High Prop Value" />
      <item value="Integer Cache" />
      <item value="Possible leading &quot;+&quot; or &quot;-&quot;" />
      <item value="negative" />
      <item value="Package private constructor which shares value array for speed. * this constructor is always expected to be called with share==true. * a separate constructor is needed because we already have a public * String(char[]) constructor that makes a copy of the given char[]." />
      <item value="Places characters representing the integer i into the * character array buf. The characters are placed into * the buffer backwards starting with the least significant * digit at the specified index (exclusive), and working * backwards from there." />
      <item value="2147483648" />
      <item value="All possible chars for representing a number as a String" />
      <item value="instance representing the primitive type" />
      <item value="is Not Allow Draft" />
      <item value="CALLABLE" />
    </histories>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>