<application>
  <component name="AppStorage">
    <histories>
      <item value="btn orange" />
      <item value="download" />
      <item value="An HTML multipart email. This class is used to send HTML formatted email. A text message can also be set for HTML unaware email clients, such as text-based email clients. This class also inherits from MultiPartEmail, so it is easy to add attachments to the email. To send an email in HTML, one should create a HtmlEmail, then use the setFrom(String), addTo(String) etc. methods. The HTML content can be set with the setHtmlMsg(String) method. The alternative text content can be set with setTextMsg(String). Either the text or HTML can be omitted, in which case the &quot;main&quot; part of the multipart becomes whichever is supplied rather than a multipart/alternative. Embedding Images and Media It is also possible to embed URLs, files, or arbitrary DataSources directly into the body of the mail: HtmlEmail he = new HtmlEmail(); File img = new File(&quot;my/image.gif&quot;); PNGDataSource png = new PNGDataSource(decodedPNGOutputStream); // a custom class StringBuffer msg = new StringBuffer(); msg.append(&quot;&lt;html&gt;&lt;body&gt;&quot;); msg.append(&quot;&lt;img src=cid:&quot;).append(he.embed(img)).append(&quot;&gt;&quot;); msg.append(&quot;&lt;img src=cid:&quot;).append(he.embed(png)).append(&quot;&gt;&quot;); msg.append(&quot;&lt;/body&gt;&lt;/html&gt;&quot;); he.setHtmlMsg(msg.toString()); // code to set the other email fields (not shown) Embedded entities are tracked by their name, which for Files is the filename itself and for URLs is the canonical path. It is an error to bind the same name to more than one entity, and this class will attempt to validate that for Files and URLs. When embedding a DataSource, the code uses the equals() method defined on the DataSources to make the determination." />
      <item value="Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in &quot;&lt;img src=../&gt;&quot; elements in the HTML code. This is done by replacing all img-src-elements with &quot;cid:&quot;-entries and embedding images in the email. For local files the class tries to either load them via an absolute path or - if available - use a relative path starting from a base directory. For files that are not found locally, the implementation tries to download the element and link it in. The image loading is done by an instance of DataSourceResolver which has to be provided by the caller." />
      <item value="A program element annotated &amp;#64;Deprecated is one that programmers * are discouraged from using, typically because it is dangerous, * or because a better alternative exists. Compilers warn when a * deprecated program element is used or overridden in non-deprecated code." />
      <item value="this affects the margin in the printer settings" />
      <item value="Make a map and return a function for checking if a key * is in that map." />
      <item value="Make a map and return a function for checking if a key" />
      <item value="-" />
      <item value="Get a PropertiesHolder that contains the actually visible properties * for a Locale, after merging all specified resource bundles. * Either fetches the holder from the cache or freshly loads it. * &lt;p&gt;Only used when caching resource bundle contents forever, i.e. * with cacheSeconds &lt; 0. Therefore, merged properties are always * cached forever." />
      <item value="Interceptor that allows for changing the current locale on every request, * via a configurable request parameter (default parameter name: &quot;locale&quot;)." />
      <item value="default Time Zone" />
      <item value="default Locale" />
      <item value="LocaleResolver implementation that uses a cookie sent back to the user in case of a custom setting, with a fallback to the specified default locale or the request's accept-header locale. This is particularly useful for stateless applications without user sessions. The cookie may optionally contain an associated time zone value as well; alternatively, you may specify a default time zone. Custom controllers can override the user's locale and time zone by calling #setLocale(Context) on the resolver, e.g. responding to a locale change request. As a more convenient alternative, consider using org.springframework.web.servlet.support.RequestContext.changeLoc" />
      <item value="map" />
      <item value="Adjusts the column width to fit the contents. This process can be relatively slow on large sheets, so this should normally only be called once per column, at the end of your processing. You can specify whether the content of merged cells should be considered or ignored. Default is to ignore merged cells." />
      <item value="Returns cell comment for the specified row and column" />
      <item value="\ u 51 FA \ u 5 E 93\ u 4 FE 1\ u 606 F" />
      <item value="set Width Percentage" />
      <item value="Query and change fields in existing documents either by method * calls or by FDF merging." />
      <item value="Gets the field box positions in the document. The return is an array of &lt;CODE&gt;float&lt;/CODE&gt; * multiple of 5. For each of this groups the values are: [page, llx, lly, urx, * ury]. The coordinates have the page rotation in consideration." />
      <item value="Sets the field value." />
      <item value="*" />
      <item value="Sets a field property. Valid property names are:" />
      <item value="url" />
      <item value="the byte array with the document" />
      <item value="Logistics" />
      <item value="dercarriage" />
      <item value="undercarriage" />
      <item value="designation" />
      <item value="carrier" />
      <item value="Set the bound key to hold the string {@code value} if the bound key is absent." />
      <item value="SETNX" />
      <item value="the prefetch count" />
      <item value="How often to publish idle container events." />
      <item value="the consumerTagStrategy to set" />
      <item value="the missingQueuesFatal to set." />
      <item value="The BackOff to recover." />
      <item value="The recovery interval." />
      <item value="the advice chain to set." />
      <item value="true to reject by default." />
      <item value="set Receive Timeout" />
      <item value="The number of consecutive timeouts to trigger stopping a consumer." />
      <item value="The number of consecutive receives to trigger a new consumer." />
      <item value="The minimum interval between consumer stops." />
      <item value="The minimum interval between new consumer starts." />
      <item value="the transaction size." />
      <item value="the maximum number of consumers." />
      <item value="the minimum number of consumers to create." />
      <item value="the message converter to use" />
    </histories>
  </component>
</application>