<application>
  <component name="AppStorage">
    <histories>
      <item value="Start one task for sure; the rest incrementally" />
      <item value="// Record exceptions so that if we fail to obtain any // result, we can throw the last exception we got." />
      <item value="Creates an ExecutorCompletionService using the supplied * executor for base task execution and a * {@link LinkedBlockingQueue} as a completion queue." />
      <item value="* * Creates an ExecutorCompletionService using the supplied * executor for base task execution and a" />
      <item value="Invoke" />
      <item value="the main mechanics of invokeAny." />
      <item value="Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given callable task. * * @param callable the callable task being wrapped * @return a &lt;tt&gt;RunnableFuture&lt;/tt&gt; which when run will call the * underlying callable and which, as a &lt;tt&gt;Future&lt;/tt&gt;, will yield * the callable's result as its result and provide for * cancellation of the underlying task." />
      <item value="Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given runnable and default * value. * * @param runnable the runnable task being wrapped * @param value the default value for the returned future * @return a &lt;tt&gt;RunnableFuture&lt;/tt&gt; which when run will run the * underlying runnable and which, as a &lt;tt&gt;Future&lt;/tt&gt;, will yield * the given value as its result and provide for cancellation of * the underlying task." />
      <item value="Extension example" />
      <item value="Provides default implementations of ExecutorService execution methods. This class implements the submit, invokeAny and invokeAll methods using a RunnableFuture returned by newTaskFor, which defaults to the FutureTask class provided in this package. For example, the implementation of submit(Runnable) creates an associated RunnableFuture that is executed and returned. Subclasses may override the newTaskFor methods to return RunnableFuture implementations other than FutureTask." />
      <item value="Provides default implementations of {@link ExecutorService} * execution methods. This class implements the &lt;tt&gt;submit&lt;/tt&gt;, * &lt;tt&gt;invokeAny&lt;/tt&gt; and &lt;tt&gt;invokeAll&lt;/tt&gt; methods using a * {@link RunnableFuture} returned by &lt;tt&gt;newTaskFor&lt;/tt&gt;, which defaults * to the {@link FutureTask} class provided in this package. For example, * the implementation of &lt;tt&gt;submit(Runnable)&lt;/tt&gt; creates an * associated &lt;tt&gt;RunnableFuture&lt;/tt&gt; that is executed and * returned. Subclasses may override the &lt;tt&gt;newTaskFor&lt;/tt&gt; methods * to return &lt;tt&gt;RunnableFuture&lt;/tt&gt; implementations other than * &lt;tt&gt;FutureTask&lt;/tt&gt;." />
      <item value="Executes the given command at some time in the future. The command * may execute in a new thread, in a pooled thread, or in the calling * thread, at the discretion of the &lt;tt&gt;Executor&lt;/tt&gt; implementation." />
      <item value="Memory consistency effects: Actions in a thread prior to * submitting a {@code Runnable} object to an {@code Executor} * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; * its execution begins, perhaps in another thread." />
      <item value="The &lt;tt&gt;Executor&lt;/tt&gt; implementations provided in this package * implement {@link ExecutorService}, which is a more extensive * interface. The {@link ThreadPoolExecutor} class provides an * extensible thread pool implementation. The {@link Executors} class * provides convenient factory methods for these Executors." />
      <item value="Many &lt;tt&gt;Executor&lt;/tt&gt; implementations impose some sort of * limitation on how and when tasks are scheduled. The executor below * serializes the submission of tasks to a second executor, * illustrating a composite executor." />
      <item value="More typically, tasks are executed in some thread other * than the caller's thread. The executor below spawns a new thread * for each task." />
      <item value="However, the &lt;tt&gt;Executor&lt;/tt&gt; interface does not strictly * require that execution be asynchronous. In the simplest case, an * executor can run the submitted task immediately in the caller's * thread:" />
      <item value="execute" />
      <item value="An object that executes submitted {@link Runnable} tasks. This * interface provides a way of decoupling task submission from the * mechanics of how each task will be run, including details of thread * use, scheduling, etc. An &lt;tt&gt;Executor&lt;/tt&gt; is normally used * instead of explicitly creating threads. For example, rather than * invoking &lt;tt&gt;new Thread(new(RunnableTask())).start()&lt;/tt&gt; for each * of a set of tasks, you might use:" />
      <item value="An object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. For example, rather than invoking new Thread(new(RunnableTask())).start() for each of a set of tasks, you might use:" />
      <item value="The IDE is running low on memory and this might affect performance. Please consider increasing available heap." />
      <item value="rovides default implementations of ExecutorService execution methods. This class implements the submit, invokeAny and invokeAll methods using a RunnableFuture returned by newTaskFor, which defaults to the FutureTask class provided in this package. For example, the implementation of submit(Runnable) creates an associated RunnableFuture that is executed and returned. Subclasses may override the newTaskFor methods to return RunnableFuture implementations other than FutureTask." />
      <item value="Wakes up node's successor, if one exists." />
      <item value="Remove; match on key only if value null, else match both." />
      <item value="Specialized implementations of map methods" />
      <item value="alternative" />
      <item value="An alternative ConcurrentMap implementation which is similar to java.util.concurrent.ConcurrentHashMap." />
      <item value="The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component." />
      <item value="if any (or empty String otherwise)" />
      <item value="the suggested component name" />
      <item value="The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component. * @return the suggested component name, if any (or empty String otherwise)" />
      <item value="Indicates that an annotated class is a &quot;component&quot;. Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning. Other class-level annotations may be considered as identifying a component as well, typically a special kind of component: e.g. the @Repository annotation or AspectJ's @Aspect annotation." />
      <item value="REQUIRED" />
      <item value="root is not allowed to impersonate hadoop" />
      <item value="root is not allowed to impersonate root" />
      <item value="create Block Output Stream" />
      <item value="/&quot;, is treated as a resource method" />
      <item value="no further information" />
      <item value="See addColumn(byte[], byte[], byte[]). This version expects that the underlying arrays won't change. It's intended for usage internal HBase to and for advanced client applications." />
      <item value="Table Not Disabled Exception" />
      <item value="Cyclic Barrier" />
      <item value="further" />
      <item value="Unknown Host Exception" />
      <item value="Protocol message tag had invalid wire type" />
      <item value="Is HBase available? Throw an exception if not." />
      <item value="Connection refused: no further information" />
      <item value="Failed to connect to server: 192.168.1.103/192.168.1.103:9000: try once and fail." />
      <item value="try once and fail." />
      <item value="order Price" />
      <item value="There are 1 datanode(s) running and 1 node(s) are excluded in this operation." />
    </histories>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>