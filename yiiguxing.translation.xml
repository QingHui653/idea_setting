<application>
  <component name="AppStorage">
    <histories>
      <item value="pivot" />
      <item value="partition" />
      <item value="value Of" />
      <item value="to String" />
      <item value="for Digit" />
      <item value="digit" />
      <item value="Character" />
      <item value="the integer {@code 1231} if this object represents * {@code true}; returns the integer {@code 1237} if this * object represents {@code false}." />
      <item value="Returns a hash code for this Boolean object." />
      <item value="Returns a Byte instance representing the specified byte value. If a new Byte instance is not required, this method should generally be used in preference to the constructor Byte(byte), as this method is likely to yield significantly better space and time performance since all byte values are cached." />
      <item value="Maximum array size is Integer.MAX_VALUE" />
      <item value="Returns the number of zero bits preceding the highest-order (&quot;leftmost&quot;) one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive int values x:" />
      <item value="Returns an int value with at most a single one-bit, in the position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified int value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero." />
      <item value="highest One Bit" />
      <item value="Determines the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the System.getProperty(String) method. The string value of this property is then interpreted as an integer value and an Integer object representing this value is returned. Details of possible numeric formats can be found with the definition of getProperty. If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned. In other words, this method returns an Integer object equal to the value of: getInteger(nm, null)" />
      <item value="a hash code value for this object, equal to the * primitive {@code int} value represented by this * {@code Integer} object." />
      <item value="integer Cache High Prop Value" />
      <item value="Integer Cache" />
      <item value="Possible leading &quot;+&quot; or &quot;-&quot;" />
      <item value="negative" />
      <item value="Package private constructor which shares value array for speed. * this constructor is always expected to be called with share==true. * a separate constructor is needed because we already have a public * String(char[]) constructor that makes a copy of the given char[]." />
      <item value="Places characters representing the integer i into the * character array buf. The characters are placed into * the buffer backwards starting with the least significant * digit at the specified index (exclusive), and working * backwards from there." />
      <item value="2147483648" />
      <item value="All possible chars for representing a number as a String" />
      <item value="instance representing the primitive type" />
      <item value="is Not Allow Draft" />
      <item value="CALLABLE" />
      <item value="PREPARED" />
      <item value="STATEMENT" />
      <item value="All of React Native (JS, Obj-C sources, Android binaries) is installed from npm" />
      <item value="// NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files" />
      <item value="Do not place your application dependencies here; they belong" />
      <item value="Could not get resource 'https://jcenter.bintray.com/com/android/tools/build/gradle/2.3.3/gradle-2.3.3.pom'." />
      <item value="Remote host closed connection during handshake" />
      <item value="generation" />
      <item value="An implementation of {@link WebMvcConfigurer} with empty methods allowing * subclasses to override only the methods they're interested in." />
      <item value="@deprecated as of 5.0 {@link WebMvcConfigurer} has default methods (made * possible by a Java 8 baseline) and can be implemented directly without the * need for this adapter" />
      <item value="An implementation of WebMvcConfigurer with empty methods allowing subclasses to override only the methods they're interested in." />
      <item value="3 wiV Wg 7 Ad T" />
      <item value="Whether to build an aggregated report at the root, or build individual reports." />
      <item value="Set this to &amp;apos;true&amp;apos; to skip analysis" />
      <item value="The name of the goal for which to show help. If unspecified, all goals will be displayed" />
      <item value="If &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;, display all settable properties for each goal." />
      <item value="Graphite" />
      <item value="Metric" />
      <item value="method" />
      <item value="Annotation that marks a method as a candidate for &lt;i&gt;asynchronous&lt;/i&gt; execution. * Can also be used at the type level, in which case all of the type's methods are * considered as asynchronous." />
      <item value="Annotation that marks a method as a candidate for asynchronous execution. Can also be used at the type level, in which case all of the type's methods are considered as asynchronous. In terms of target method signatures, any parameter types are supported. However, the return type is constrained to either void or java.util.concurrent.Future. In the latter case, the Future handle returned from the proxy will be an actual asynchronous Future that can be used to track the result of the asynchronous method execution. However, since the target method needs to implement the same signature, it will have to return a temporary Future handle that just passes the return value through: e.g. Spring's AsyncResult or EJB 3.1's" />
      <item value="sku code" />
      <item value="Invalid character found in method name. HTTP method names must be tokens" />
    </histories>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>