<application>
  <component name="AppStorage">
    <histories>
      <item value="The PostConstruct annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization. This method MUST be invoked before the class is put into service. This annotation MUST be supported on all classes that support dependency injection. The method annotated with PostConstruct MUST be invoked even if the class does not request any resources to be injected. Only one method can be annotated with this annotation. The method on which the PostConstruct annotation is applied MUST fulfill all of the following criteria:&#10;The method MUST NOT have any parameters except in the case of interceptors in which case it takes an InvocationContext object as defined by the Interceptors specification.&#10;The method defined on an interceptor class MUST HAVE one of the following signatures:&#10;void &lt;METHOD&gt;(InvocationContext)&#10;Object &lt;METHOD&gt;(InvocationContext) throws Exception&#10;Note: A PostConstruct interceptor method must not throw application exceptions, but it may be declared to throw checked exceptions including the java.lang.Exception if the same interceptor method interposes on business or timeout methods in addition to lifecycle events. If a PostConstruct interceptor method returns a value, it is ignored by the container.&#10;The method defined on a non-interceptor class MUST HAVE the following signature:&#10;void &lt;METHOD&gt;()&#10;The method on which PostConstruct is applied MAY be public, protected, package private or private.&#10;The method MUST NOT be static except for the application client.&#10;The method MAY be final.&#10;If the method throws an unchecked exception the class MUST NOT be put into service except in the case of EJBs where the EJB can handle exceptions and even recover from them." />
      <item value="Change Sku Stock Info Consumer" />
      <item value="Balance Finance" />
      <item value="ljy 2019/5/28" />
      <item value="ljy" />
      <item value="preserve" />
      <item value="is Obsolete" />
      <item value="is Ex Warehouse" />
      <item value="prohibited by Gerrit: ref update access denied" />
      <item value="(prohibited by Gerrit: ref update access denied)" />
      <item value="Consider revisiting the entries above or defining a bean of type 'org.springframework.cloud.consul.discovery.TtlScheduler' in your configuration." />
      <item value="Parameter 2 of constructor in com.kp.server.lib.core.config.KpConsulServiceRegistry required a bean of type 'org.springframework.cloud.consul.discovery.TtlScheduler' that could not be found." />
      <item value="APPLICATION FAILED TO START" />
      <item value="Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled." />
      <item value="This is very likely to create a memory leak. Stack trace of thread:" />
      <item value="No URLs will be polled as dynamic configuration sources." />
      <item value="Located meta server address http://192.168.8.12:18080 for env UNKNOWN from com.ctrip.framework.apollo.internals.DefaultMetaServerProvider" />
      <item value="Could not load config for namespace application from Apollo, please check whether the configs are released in Apollo! Return default value now!" />
      <item value="[2019-07-04 12:30:52,746] [kp-server-flow] [WARN ]:[main] Could not load config for namespace application from Apollo, please check whether the configs are released in Apollo! Return default value now!" />
      <item value=", please check whether the configs are released in Apollo! Return default value now!" />
      <item value="[Cause: Could not complete get operation [Cause: connect timed out]]" />
      <item value="Located meta services from apollo.meta configuration: http://192.168.3.31:9080!" />
      <item value="SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization" />
      <item value="Connection timed out: connect" />
      <item value="The driver has not received any packets from the server." />
      <item value="Eureka Client Application Client" />
      <item value="Spring Application Builder" />
      <item value="Spring Application" />
      <item value="TODO: is it possible or sensible to share a ResourceLoader?" />
      <item value="Flag to explicitly request a web or non-web environment (auto detected based on * classpath if not set)." />
      <item value="An {@code AtomicMarkableReference} maintains an object reference * along with a mark bit, that can be updated atomically. * * &lt;p&gt;Implementation note: This implementation maintains markable * references by creating internal objects representing &quot;boxed&quot; * [reference, boolean] pairs." />
      <item value="A {@code long} array in which elements may be updated atomically. * See the {@link java.util.concurrent.atomic} package specification * for description of the properties of atomic variables." />
      <item value="A reflection-based utility that enables atomic updates to * designated {@code volatile int} fields of designated classes. * This class is designed for use in atomic data structures in which * several fields of the same node are independently subject to atomic * updates. * * &lt;p&gt;Note that the guarantees of the {@code compareAndSet} * method in this class are weaker than in other atomic classes. * Because this class cannot ensure that all uses of the field * are appropriate for purposes of atomic access, it can * guarantee atomicity only with respect to other invocations of * {@code compareAndSet} and {@code set} on the same updater." />
      <item value="The type of the object holding the updatable field" />
      <item value="Atomic Integer Field Updater" />
      <item value="random Level" />
      <item value="Insertion" />
      <item value="Returns a base-level node with key strictly less than given key, * or the base-level header if there is no such node. Also * unlinks indexes to deleted nodes found along the way. Callers * rely on this side-effect of clearing indices to deleted nodes." />
      <item value="reread" />
      <item value="restart" />
      <item value="natural ordering" />
      <item value="{@linkplain Comparable natural ordering} of the keys." />
      <item value="Constructs a new, empty map, sorted according to the" />
      <item value="get Next Month Start Date" />
      <item value="get Month Start Date" />
      <item value="Returns the index within this string of the first occurrence of the * specified substring. * * &lt;p&gt;The returned index is the smallest value &lt;i&gt;k&lt;/i&gt; for which: * &lt;blockquote&gt;&lt;pre&gt; * this.startsWith(str, &lt;i&gt;k&lt;/i&gt;) * &lt;/pre&gt;&lt;/blockquote&gt; * If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned." />
      <item value="get Release Code" />
      <item value="command Order" />
      <item value="Delivery" />
      <item value="release Order DAO" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="649" />
        <entry key="ENGLISH" value="649" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>