<application>
  <component name="AppStorage">
    <histories>
      <item value="SET WITH EXPIRE TIME" />
      <item value="SET IF NOT EXIST" />
      <item value="Batch Upsert Sku Stock Flow" />
      <item value="bulk Upsert Sku Stock Flow" />
      <item value="negate" />
      <item value="multiply" />
      <item value="Path prefix to be used by all method-level mappings. Can be used with or without" />
      <item value="No active profile set, falling back to default profiles: default" />
      <item value="Computed heartbeatInterval: PT20S" />
      <item value="period" />
      <item value="max Period" />
      <item value="max Attempts" />
      <item value="3" />
      <item value="INSTANCE" />
      <item value=" Mini Program" />
      <item value="multiplicand value to be multiplied by this {@code BigDecimal}. *" />
      <item value="Instructs the JMS provider to log the message to stable storage as part of the * client's send operation." />
      <item value="Does not require that the message be logged to stable storage. This is the * lowest-overhead delivery mode but can lead to lost of message if the broker * goes down." />
      <item value="NON PERSISTENT" />
      <item value="Stock Order" />
      <item value="DEFAULT" />
      <item value="COMPLETE" />
      <item value="OBSOLETE" />
      <item value="is Obsolete" />
      <item value="init" />
      <item value="stock In" />
      <item value="stock Out" />
      <item value="allocate" />
      <item value="batch Upsert Finance Flow" />
      <item value="zhouliang" />
      <item value="Creates a {@code CallerRunsPolicy}." />
      <item value="threadFactory the factory to use when the executor * creates a new thread" />
      <item value="handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached" />
      <item value="Rejected Execution Handler" />
      <item value="work Queue" />
      <item value="is From 6" />
      <item value="SYS FLAG OF_6" />
      <item value="is Draft" />
      <item value="completed" />
      <item value="Stock Order Info Consumer" />
      <item value="msg Body Str" />
      <item value="stock Order Info Msg" />
      <item value="Ratio" />
      <item value="nit 3 Ratio" />
      <item value=" process" />
      <item value="OrderInfoConsumer consumeThreadMin was change to" />
      <item value="The PostConstruct annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization. This method MUST be invoked before the class is put into service. This annotation MUST be supported on all classes that support dependency injection. The method annotated with PostConstruct MUST be invoked even if the class does not request any resources to be injected. Only one method can be annotated with this annotation. The method on which the PostConstruct annotation is applied MUST fulfill all of the following criteria:&#10;The method MUST NOT have any parameters except in the case of interceptors in which case it takes an InvocationContext object as defined by the Interceptors specification.&#10;The method defined on an interceptor class MUST HAVE one of the following signatures:&#10;void &lt;METHOD&gt;(InvocationContext)&#10;Object &lt;METHOD&gt;(InvocationContext) throws Exception&#10;Note: A PostConstruct interceptor method must not throw application exceptions, but it may be declared to throw checked exceptions including the java.lang.Exception if the same interceptor method interposes on business or timeout methods in addition to lifecycle events. If a PostConstruct interceptor method returns a value, it is ignored by the container.&#10;The method defined on a non-interceptor class MUST HAVE the following signature:&#10;void &lt;METHOD&gt;()&#10;The method on which PostConstruct is applied MAY be public, protected, package private or private.&#10;The method MUST NOT be static except for the application client.&#10;The method MAY be final.&#10;If the method throws an unchecked exception the class MUST NOT be put into service except in the case of EJBs where the EJB can handle exceptions and even recover from them." />
      <item value="Change Sku Stock Info Consumer" />
      <item value="Balance Finance" />
      <item value="ljy 2019/5/28" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="701" />
        <entry key="ENGLISH" value="702" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="2" />
        <entry key="MALAY" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>