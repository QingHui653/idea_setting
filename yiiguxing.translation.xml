<application>
  <component name="AppStorage">
    <histories>
      <item value="No need to lookup: the ModelAndView object contains the actual View object." />
      <item value="We need to resolve the view name." />
      <item value="This is the last stage in handling a request. It may involve resolving the view by name." />
      <item value="Render the given ModelAndView." />
      <item value="Ensure we have at least one ViewResolver, by registering" />
      <item value="we'll add a default ViewResolver later." />
      <item value="Ignore, we'll add a default ViewResolver later." />
      <item value="row Params" />
      <item value="property" />
      <item value="inclusion" />
      <item value="default-property-inclusion" />
      <item value="STATE STATUS" />
      <item value="Specified class is an interface" />
      <item value="update Notice Loans" />
      <item value="常数时间" />
      <item value="常数时间内" />
      <item value="Sorts the specified array into ascending numerical order." />
      <item value="a the array to be sorted" />
      <item value="parallel Sort" />
      <item value="Contents of collection 'nums' are queried, but never updated" />
      <item value="原始" />
      <item value="打乱" />
      <item value="platform" />
      <item value="security Uri" />
      <item value="methods Condition" />
      <item value="Invalid AES key length: 8 bytes" />
      <item value="Value that indicates that only properties with non-null * values are to be included." />
      <item value="Invalid property 'data[0][businessType]' of bean class [com.ivyb2b.ops.api.controller.workbench.Page]: Index of out of bounds in property path 'data[0][businessType]';" />
      <item value="Invalid property 'data' of bean class [com.ivyb2b.common.bean.Pager]: Bean property 'data' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?" />
      <item value="'scope' is defined but never used" />
      <item value="You may use special comments to disable some warnings" />
      <item value="You are using an offline license." />
      <item value="You are advised to use Spring 4.3.19.RELEASE or later with this version. You are running: 4.3.3.RELEASE" />
      <item value="receipt Warehouse Id" />
      <item value="is Positive Integer" />
      <item value="Cursor" />
      <item value="加载类路径" />
      <item value="配置" />
      <item value="spi配置文件 配置在 加载类路径下/META-INF/services/接口全称" />
      <item value="Multiple Spring Data modules found, entering strict repository configuration mode!" />
      <item value="Enabling autowire by type for MapperFactoryBean" />
      <item value="definition" />
      <item value="213" />
      <item value="0 x 1.0 p-1022" />
      <item value="/** * A constant holding the positive infinity of type * {@code double}. It is equal to the value returned by * {@code Double.longBitsToDouble(0x7ff0000000000000L)}. */" />
      <item value="set the data format (must be a valid format). Built in formats are defined at {@link BuiltinFormats}." />
      <item value="Set whether the text should be wrapped. * Setting this flag to &lt;code&gt;true&lt;/code&gt; make all content visible * within a cell by displaying it on multiple lines" />
      <item value="set the type of vertical alignment for the cell" />
      <item value="Annotation that marks a method as a candidate for asynchronous execution. Can also be used at the type level, in which case all of the type's methods are considered as asynchronous. In terms of target method signatures, any parameter types are supported. However, the return type is constrained to either void or java.util.concurrent.Future. In the latter case, you may declare the more specific org.springframework.util.concurrent.ListenableFuture or java.util.concurrent.CompletableFuture types which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps. A Future handle returned from the proxy will be an actual asynchronous Future that can be used to track the result of the asynchronous method execution. However, since the target method needs to implement the same signature, it will have to return a temporary Future handle that just passes a value through: e.g. Spring's AsyncResult, EJB 3.1's javax.ejb.AsyncResult, or java.util.concurrent.CompletableFuture.completedFuture(Object)." />
      <item value="Annotation that marks a method as a candidate for asynchronous execution. Can also be used at the type level, in which case all of the type's methods are considered as asynchronous.&#10;In terms of target method signatures, any parameter types are supported. However, the return type is constrained to either void or java.util.concurrent.Future. In the latter case, you may declare the more specific org.springframework.util.concurrent.ListenableFuture or java.util.concurrent.CompletableFuture types which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps.&#10;A Future handle returned from the proxy will be an actual asynchronous Future that can be used to track the result of the asynchronous method execution. However, since the target method needs to implement the same signature, it will have to return a temporary Future handle that just passes a value through: e.g. Spring's AsyncResult, EJB 3.1's javax.ejb.AsyncResult, or java.util.concurrent.CompletableFuture.completedFuture(Object)." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="169" />
        <entry key="ENGLISH" value="170" />
        <entry key="RUSSIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>