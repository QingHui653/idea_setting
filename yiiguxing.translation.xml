<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="ENGLISH" />
    <histories>
      <item value="版本的 excel" />
      <item value="Verify that merged regions do not intersect multi-cell array formulas and * no merged regions intersect another merged region in this sheet." />
      <item value="get Column Width In Pixels" />
      <item value="Get the hidden state for a given column." />
      <item value="Adds a merged region of cells on a sheet." />
      <item value="High level HSSFRow object representing a row in the sheet" />
      <item value="row number" />
      <item value="Create a new row within the sheet and return the high level representation" />
      <item value="/** * Returns the column outline level. Increased as you * put it into more groups (outlines), reduced as * you take it out of them. */" />
      <item value="Returns the column outline level. Increased as you" />
      <item value="get Column Outline Level" />
      <item value="shift Rows" />
      <item value="get Top Row" />
      <item value="Shifts rows between startRow and endRow n number of rows. * If you use a negative number, it will shift rows up. * Code ensures that rows don't wrap around" />
      <item value="the number of rows to shift" />
      <item value="Additionally shifts merged regions that are completely defined in these * rows (ie. merged 2 cells on a row to be shifted). All merged regions that are * completely overlaid by shifting will be deleted." />
      <item value="** * Shifts rows between startRow and endRow n number of rows. * If you use a negative number, it will shift rows up. * Code ensures that rows don't wrap around. * * Calls shiftRows(startRow, endRow, n, false, false); * * &lt;p&gt; * Additionally shifts merged regions that are completely defined in these * rows (ie. merged 2 cells on a row to be shifted). * @param startRow the row to start shifting * @param endRow the row to end shifting * @param n the number of rows to shift */" />
      <item value="set Row Break" />
      <item value="176" />
      <item value="issue" />
      <item value="issue #176" />
      <item value="cache Key" />
      <item value="clear Local Cache" />
      <item value="Executor" />
      <item value="Clinton" />
      <item value="Begin" />
      <item value="Error" />
      <item value="Error Context" />
      <item value="V" />
      <item value="K" />
      <item value="mappers" />
      <item value="Error parsing SQL Mapper Configuration. Cause" />
      <item value="SQL Mapper Configuration" />
      <item value="Converts a public DTD into a local one" />
      <item value="/* * Converts a public DTD into a local one * * @param publicId Unused but required by EntityResolver interface * @param systemId The DTD that is being requested * @return The InputSource for the DTD * @throws org.xml.sax.SAXException If anything goes wrong */" />
      <item value="ibatis -3- config" />
      <item value="Sets or retrieves a destination URL or an anchor point." />
      <item value="/* * Copyright 2009-2012 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */" />
      <item value="this must only be called AFTER common constructor" />
      <item value="important: this must only be called AFTER common constructor" />
      <item value="KSZZCK" />
      <item value="DEFAULT" />
      <item value="Expected one result (or null) to be returned by selectOne(), but found: &quot;" />
      <item value="andles MyBatis SqlSession life cycle. It can register and get SqlSessions from * Spring {@code TransactionSynchronizationManager}. Also works if no transaction is active." />
      <item value="Set optional properties to be passed into the SqlSession configuration, as alternative to a * {@code &amp;lt;properties&amp;gt;} tag in the configuration xml file. This will be used to * resolve placeholders in the config file." />
      <item value="If true, a final check is done on Configuration to assure that all mapped * statements are fully loaded and there is no one still pending to resolve * includes. Defaults to false." />
      <item value="object Factory" />
      <item value="Intentionally ignore. Prefer previous error." />
      <item value="Build a SqlSessionFactory instance. The default implementation uses the standard MyBatis XMLConfigBuilder API to build a SqlSessionFactory instance based on an Reader." />
      <item value="The default implementation uses the standard MyBatis {@code XMLConfigBuilder} API to build a * {@code SqlSessionFactory} instance based on an Reader." />
    </histories>
  </component>
</application>