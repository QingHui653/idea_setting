<application>
  <component name="AppStorage">
    <histories>
      <item value="register Transaction Aspect" />
      <item value="implementation that allows users to easily configure all the infrastructure beans required to enable annotation-driven transaction demarcation. By default, all proxies are created as JDK proxies. This may cause some problems if you are injecting objects as concrete classes rather than interfaces. To overcome this restriction you can set the 'proxy-target-class' attribute to 'true', which will result in class-based proxies being created." />
      <item value="Annotation Driven Bean Definition Parser" />
      <item value="proxy" />
      <item value="aspectj" />
      <item value="Assume annotations source." />
      <item value="// Using attributes source." />
      <item value="allowed at most once inside element &lt;advice&gt;" />
      <item value="add Property Reference" />
      <item value="rollback - for" />
      <item value="timeout" />
      <item value="propagation" />
      <item value="isolation" />
      <item value="Files syntax highlight Coloring ignored files in the Project View Gitignore templates filtering and selecting in rules generator by name and content Show ignored files by specified ignore file (right click on .gitignore file) Hide ignored files in Project View Create file in currently selected directory Generate Gitignore rules basing on GitHub's templates collection Add selected file/directory to ignore rules from popup menu Suggesting .gitignore file creation for new project Entries inspection (duplicated, covered, unused, relative, incorrect syntax, relative entries) with fix actions Comments and brackets support Navigation to entries in Project view Renaming entries from ignore file Close opened ignored files action Custom user templates with import/export features Create custom templates from existing rules Favorite templates" />
      <item value="Returns {@code true} if this queue contains the specified element. * More formally, returns {@code true} if and only if this queue contains * at least one element {@code e} such that {@code o.equals(e)}." />
      <item value="the number of elements in this queue" />
      <item value="Beware that, unlike in most collections, this method is * &lt;em&gt;NOT&lt;/em&gt; a constant-time operation. Because of the * asynchronous nature of these queues, determining the current * number of elements requires an O(n) traversal. * Additionally, if elements are added or removed during execution * of this method, the returned result may be inaccurate. Thus, * this method is typically not very useful in concurrent * applications." />
      <item value="Returns the number of elements in this queue. If this queue * contains more than {@code Integer.MAX_VALUE} elements, returns * {@code Integer.MAX_VALUE}." />
      <item value="restart From Head" />
      <item value="hop two nodes at a time" />
      <item value="Successful CAS is the linearization point // for e to become an element of this queue, // and for newNode to become &quot;live&quot;." />
      <item value="Try to CAS head to p. If successful, repoint old head to itself * as sentinel for succ(), below." />
      <item value="Have to override just to update the javadoc" />
      <item value="Creates a {@code ConcurrentLinkedQueue} that is initially empty." />
      <item value="A node from which the last node on list (that is, the unique * node with node.next == null) can be reached in O(1) time. * Invariants: * - the last node is always reachable from tail via succ() * - tail != null * Non-invariants: * - tail.item may or may not be null. * - it is permitted for tail to lag behind head, that is, for tail * to not be reachable from head! * - tail.next may or may not be self-pointing to tail." />
      <item value="A node from which the first live (non-deleted) node (if any) * can be reached in O(1) time. * Invariants: * - all live nodes are reachable from head via succ() * - head != null * - (tmp = head).next != tmp || tmp != head * Non-invariants: * - head.item may or may not be null. * - it is permitted for tail to lag behind head, that is, for tail * to not be reachable from head!" />
      <item value="tail" />
      <item value="Unsafe mechanics" />
      <item value="Constructs a new node. Uses relaxed write because item can * only be seen after publication via casNext." />
      <item value="volatile" />
      <item value="CASing a Node's item reference to null atomically removes the * element from the queue. Iterators skip over Nodes with null * items. Prior implementations of this class had a race between * poll() and remove(Object) where the same element would appear * to be successfully removed by two concurrent operations. The * method remove(Object) also lazily unlinks deleted Nodes, but * this is merely an optimization." />
      <item value="Since head and tail are updated concurrently and independently, * it is possible for tail to lag behind head (why not)?" />
      <item value="Both head and tail are permitted to lag. In fact, failing to * update them every time one could is a significant optimization * (fewer CASes). As with LinkedTransferQueue (see the internal * documentation for that class), we use a slack threshold of two; * that is, we update head/tail when the current pointer appears * to be two or more steps away from the first/last node." />
      <item value="The above might appear to imply that all Nodes are GC-reachable * from a predecessor dequeued Node. That would cause two problems: * - allow a rogue Iterator to cause unbounded memory retention * - cause cross-generational linking of old Nodes to new Nodes if * a Node was tenured while live, which generational GCs have a * hard time dealing with, causing repeated major collections. * However, only non-deleted Nodes need to be reachable from * dequeued Nodes, and reachability does not necessarily have to * be of the kind understood by the GC. We use the trick of * linking a Node that has just been dequeued to itself. Such a * self-link implicitly means to advance to head." />
      <item value="The fundamental invariants are: * - There is exactly one (last) Node with a null next reference, * which is CASed when enqueueing. This last Node can be * reached in O(1) time from tail, but tail is merely an * optimization - it can always be reached in O(N) time from * head as well. * - The elements contained in the queue are the non-null items in * Nodes that are reachable from head. CASing the item * reference of a Node to null atomically removes it from the * queue. Reachability of all elements from head must remain * true even in the case of concurrent modifications that cause * head to advance. A dequeued Node may remain in use * indefinitely due to creation of an Iterator or simply a * poll() that has lost its time slice." />
      <item value="Note that like most non-blocking algorithms in this package, * this implementation relies on the fact that in garbage * collected systems, there is no possibility of ABA problems due * to recycled nodes, so there is no need to use &quot;counted * pointers&quot; or related techniques seen in versions used in * non-GC'ed settings." />
      <item value="Scott" />
      <item value="Michael" />
      <item value="This is a modification of the Michael &amp; Scott algorithm, * adapted for a garbage-collected environment, with support for * interior node deletion (to support remove(Object)). For * explanation, read the paper. *" />
      <item value="&lt;p&gt;This class is a member of the * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; * Java Collections Framework&lt;/a&gt;." />
      <item value="&lt;p&gt;Memory consistency effects: As with other concurrent * collections, actions in a thread prior to placing an object into a * {@code ConcurrentLinkedQueue} * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; * actions subsequent to the access or removal of that element from * the {@code ConcurrentLinkedQueue} in another thread." />
      <item value="&lt;p&gt;This class and its iterator implement all of the &lt;em&gt;optional&lt;/em&gt; * methods of the {@link Queue} and {@link Iterator} interfaces." />
      <item value="&lt;p&gt;Beware that, unlike in most collections, the {@code size} method * is &lt;em&gt;NOT&lt;/em&gt; a constant-time operation. Because of the * asynchronous nature of these queues, determining the current number * of elements requires a traversal of the elements, and so may report * inaccurate results if this collection is modified during traversal. * Additionally, the bulk operations {@code addAll}, * {@code removeAll}, {@code retainAll}, {@code containsAll}, * {@code equals}, and {@code toArray} are &lt;em&gt;not&lt;/em&gt; guaranteed * to be performed atomically. For example, an iterator operating * concurrently with an {@code addAll} operation might view only some * of the added elements." />
      <item value="&lt;p&gt;Iterators are &lt;i&gt;weakly consistent&lt;/i&gt;, returning elements * reflecting the state of the queue at some point at or since the * creation of the iterator. They do &lt;em&gt;not&lt;/em&gt; throw {@link * java.util.ConcurrentModificationException}, and may proceed concurrently * with other operations. Elements contained in the queue since the creation * of the iterator will be returned exactly once." />
      <item value="&lt;p&gt;This implementation employs an efficient &amp;quot;wait-free&amp;quot; * algorithm based on one described in &lt;a * href=&quot;http://www.cs.rochester.edu/u/michael/PODC96.html&quot;&gt; Simple, * Fast, and Practical Non-Blocking and Blocking Concurrent Queue * Algorithms&lt;/a&gt; by Maged M. Michael and Michael L. Scott." />
      <item value="An unbounded thread-safe {@linkplain Queue queue} based on linked nodes. * This queue orders elements FIFO (first-in-first-out). * The &lt;em&gt;head&lt;/em&gt; of the queue is that element that has been on the * queue the longest time. * The &lt;em&gt;tail&lt;/em&gt; of the queue is that element that has been on the * queue the shortest time. New elements * are inserted at the tail of the queue, and the queue retrieval * operations obtain elements at the head of the queue. * A {@code ConcurrentLinkedQueue} is an appropriate choice when * many threads will share access to a common collection. * Like most other concurrent collection implementations, this class * does not permit the use of {@code null} elements." />
      <item value="An unbounded thread-safe queue based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. A ConcurrentLinkedQueue is an appropriate choice when many threads will share access to a common collection. Like most other concurrent collection implementations, this class does not permit the use of null elements. This implementation employs an efficient &quot;wait-free&quot; algorithm based on one described in Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms by Maged M. Michael and Michael L. Scott." />
      <item value="We extend the techniques developed for ConcurrentLinkedQueue and * LinkedTransferQueue (see the internal docs for those classes). * Understanding the ConcurrentLinkedQueue implementation is a * prerequisite for understanding the implementation of this class." />
      <item value="This is an implementation of a concurrent lock-free deque * supporting interior removes but not interior insertions, as * required to support the entire Deque interface." />
      <item value="Iterators are weakly consistent, returning elements reflecting the state of the deque at some point at or since the creation of the iterator. They do not throw ConcurrentModificationException, and may proceed concurrently with other operations. Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these deques, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the added elements. This class and its iterator implement all of the optional methods of the Deque and Iterator interfaces. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a ConcurrentLinkedDeque happen-before actions subsequent to the access or removal of that element from the ConcurrentLinkedDeque in another thread. This class is a member of the Java Collections Framework." />
    </histories>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>