<application>
  <component name="AppStorage">
    <histories>
      <item value="Transfers all entries to new table array. This method is called * by superclass resize. It is overridden for performance, as it is * faster to iterate using our linked list." />
      <item value="Rehash the table if the threshold is exceeded" />
      <item value="overflow-conscious code" />
      <item value="old Capacity" />
      <item value="hashSeed will be zero if alternative hashing is disabled." />
      <item value="0 x 7 FFFFFFF" />
      <item value="Constructs a new, empty hashtable with a default initial capacity (11)" />
      <item value="11" />
      <item value="an {@code int} value with a single one-bit, in the position * of the highest-order one-bit in the specified value, or zero if * the specified value is itself equal to zero." />
      <item value="highest One Bit" />
      <item value="MAXIMUM CAPACITY" />
      <item value="Callbacks to allow LinkedHashMap post-actions" />
      <item value="Initializes or doubles table size. If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table." />
      <item value="if false, the table is in creation mode." />
      <item value="if true, don't change existing value" />
      <item value="only If Absent" />
      <item value="false" />
      <item value="all other fields defaulted" />
      <item value="The table, initialized on first use, and resized as * necessary. When allocated, length is always a power of two. * (We also tolerate length zero in some operations to allow * bootstrapping mechanics that are currently not needed.) */" />
      <item value="Returns a power of two size for the given target capacity." />
      <item value="table Size For" />
      <item value="onstructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity * (16) and the default load factor (0.75)." />
      <item value="DEFAULT INITIAL CAPACITY" />
      <item value="The bin count threshold for using a tree rather than list for a * bin. Bins are converted to trees when adding an element to a * bin with at least this many nodes. The value must be greater * than 2 and should be at least 8 to mesh with assumptions in * tree removal about conversion back to plain bins upon * shrinkage." />
      <item value="The bin count threshold for untreeifying a (split) bin during a * resize operation. Should be less than TREEIFY_THRESHOLD, and at * most 6 to mesh with shrinkage detection under removal." />
      <item value="UNTREEIFY THRESHOLD" />
      <item value="TREEIFY THRESHOLD" />
      <item value="The maximum capacity, used if a higher value is implicitly specified * by either of the constructors with arguments. * MUST be a power of two &lt;= 1&lt;&lt;30." />
      <item value="Because TreeNodes are about twice the size of regular nodes, we * use them only when bins contain enough nodes to warrant use * (see TREEIFY_THRESHOLD). And when they become too small (due to * removal or resizing) they are converted back to plain bins. In * usages with well-distributed user hashCodes, tree bins are * rarely used. Ideally, under random hashCodes, the frequency of * nodes in bins follows a Poisson distribution * (http://en.wikipedia.org/wiki/Poisson_distribution) with a * parameter of about 0.5 on average for the default resizing * threshold of 0.75, although with a large variance because of * resizing granularity. Ignoring variance, the expected * occurrences of list size k are (exp(-0.5) * pow(0.5, k) / * factorial(k)). The first values are:" />
      <item value="0: 0.60653066 * 1: 0.30326533 * 2: 0.07581633 * 3: 0.01263606 * 4: 0.00157952 * 5: 0.00015795 * 6: 0.00001316 * 7: 0.00000094 * 8: 0.00000006" />
      <item value="Random Access" />
      <item value="Random Access Sub List" />
      <item value="Removes the first occurrence of the specified element from this list, * if it is present. If this list does not contain the element, it is * unchanged. More formally, removes the element with the lowest index * {@code i} such that" />
      <item value="num Moved" />
      <item value="clear to let GC do its work" />
      <item value="minCapacity is usually close to size, so this is a win" />
      <item value="element Data" />
      <item value="new Capacity" />
      <item value="MAX ARRAY SIZE" />
      <item value="any size if real element table" />
      <item value="Capacity" />
      <item value="ensure" />
      <item value="Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if * necessary, to ensure that it can hold at least the number of elements * specified by the minimum capacity argument. *" />
      <item value="Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the * list's current size. An application can use this operation to minimize * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance." />
      <item value="trim To Size" />
      <item value="oldCapacity + (oldCapacity &gt;&gt; 1);" />
      <item value="Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument." />
      <item value="minCapacity is usually close to size, so this is a win:" />
      <item value="min Capacity" />
      <item value="DEFAULTCAPACITY EMPTY ELEMENTDATA" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="468" />
        <entry key="ENGLISH" value="469" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>