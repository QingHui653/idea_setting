<application>
  <component name="AppStorage">
    <histories>
      <item value="build Pick Order Context" />
      <item value="build Delivery Order Context" />
      <item value="corporation logo" />
      <item value="product Page" />
      <item value="SPEC COMPARE 2" />
      <item value="SPEC COMPARE" />
      <item value="IS TEXT MODE" />
      <item value="dirty work" />
      <item value="autoescape" />
      <item value="make Spec Table Data" />
      <item value="pre Process" />
      <item value="render" />
      <item value="Crypt" />
      <item value="Wx Ma Crypt Utils" />
      <item value="canonical, avoids branching, which matters more than alu ops" />
      <item value="Class for miscellaneous helper methods." />
      <item value="Matrix" />
      <item value="WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; getWritableDataSource()" />
      <item value="Param Flow Rule" />
      <item value="Writable Data Source" />
      <item value="type:parameter flow rule" />
      <item value="Receiving rule change" />
      <item value="[API Server] Receiving rule change (type:parameter flow rule)" />
      <item value="Lock for a specific resource." />
      <item value="fire Exit" />
      <item value="Slot Chain" />
      <item value="Node Selector Slot" />
      <item value="Following code is an example, &quot;abc&quot; represent a unique name for the protected resource: public void foo() { Entry entry = null; try { entry = SphU.entry(&quot;abc&quot;); // resource that need protection } catch (BlockException blockException) { // when goes there, it is blocked // add blocked handle logic here } catch (Throwable bizException) { // business exception Tracer.trace(bizException); } finally { // ensure finally be executed if (entry != null){ entry.exit(); } } }" />
      <item value="FlowRuleManager.loadRules(List), DegradeRuleManager.loadRules(List), SystemRuleManager.loadRules(List)." />
      <item value="Conceptually, physical or logical resource that need protection should be surrounded by an entry. The requests to this resource will be blocked if any criteria is met, eg. when any Rule's threshold is exceeded. Once blocked, a BlockException will be thrown. To configure the criteria, we can use XXXRuleManager.loadRules() to add rules, eg." />
      <item value="Sph U" />
      <item value="graphs whose nodes/edges are insertion-ordered, sorted, or unordered" />
      <item value="graphs that do/don't allow self-loops" />
      <item value="undirected graphs" />
      <item value="directed graphs" />
      <item value="Graph supports the following use cases (definitions of terms ):" />
      <item value="Capabilities" />
      <item value="An interface for graph -structured data, whose edges are anonymous entities with no identity or information of their own. A graph is composed of a set of nodes and a set of edges connecting pairs of nodes. There are three main interfaces provided to represent graphs. In order of increasing complexity they are: Graph, ValueGraph, and Network. You should generally prefer the simplest interface that satisfies your use case. See the &quot;Choosing the right graph type&quot; section of the Guava User Guide for more details." />
      <item value="Returns the number of edges in this graph; used to calculate the size of {@link #edges()}. The * default implementation is O(|N|). You can manually keep track of the number of edges and * override this method for better performance." />
      <item value="his class provides a skeletal implementation of {@link Graph}. It is recommended to extend this * class rather than implement {@link Graph} directly." />
      <item value="Graph" />
      <item value="kevinb" />
      <item value="remove this" />
      <item value="Combine the characters and/or escaped sequences into a single array." />
      <item value="A TypeTable maintains mapping from {@link TypeVariable} to types." />
      <item value="Returns an Escaper instance that escapes strings so they can be safely included in URL form parameter names and values . Escaping is performed with the UTF-8 character encoding. The caller is responsible for replacing any unpaired carriage return or line feed characters with a CR+LF pair on any non-file inputs before escaping them with this escaper. When escaping a String, the following rules apply: The alphanumeric characters &quot;a&quot; through &quot;z&quot;, &quot;A&quot; through &quot;Z&quot; and &quot;0&quot; through &quot;9&quot; remain the same. The special characters &quot;.&quot;, &quot;-&quot;, &quot;*&quot;, and &quot;_&quot; remain the same. The space character &quot; &quot; is converted into a plus sign &quot;+&quot;. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string &quot;%XY&quot;, where &quot;XY&quot; is the two-digit, uppercase, hexadecimal representation of the byte value. This escaper is suitable for escaping parameter names and values even when using the non-standard semicolon , rather than the ampersand, as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must interoperate with systems that require semicolons. Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences." />
      <item value="Returns the escaped form of a given literal string, starting at the given index. This method is * called by the {@link #escape(String)} method when it discovers that escaping is required. It is * protected to allow subclasses to override the fastpath escaping function to inline their * escaping test. See {@link CharEscaperBuilder} for an example usage." />
      <item value="Returns the escaped form of a given literal string, starting at the given index. This method is called by the escape(String) method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See CharEscaperBuilder for an example usage. Params: s – the literal string to be escaped index – the index to start escaping from Returns: the escaped form of string Throws: NullPointerException – if string is null Inferred annotations: Method escapeSlow: @org.jetbrains.annotations.NotNull @org.jetbrains.annotations.Contract(&quot;_,_-&gt;new&quot;) Parameter s: @org.jetbrains.annotations.NotNull" />
      <item value="Returns the escaped form of a given literal string. * * &lt;p&gt;Note that this method may treat input characters differently depending on the specific * escaper implementation. * * &lt;ul&gt; * &lt;li&gt;{@link UnicodeEscaper} handles &lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt; * correctly, including surrogate character pairs. If the input is badly formed the escaper should * throw {@link IllegalArgumentException}. * &lt;li&gt;{@link CharEscaper} handles Java characters independently and does not verify the input for * well formed characters. A {@code CharEscaper} should not be used in situations where input is * not guaranteed to be restricted to the Basic Multilingual Plane (BMP). * &lt;/ul&gt;" />
      <item value="TODO(user): evaluate custom implementations, considering package private constructor. /** Constructor for use by subclasses." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1538" />
        <entry key="ENGLISH" value="1539" />
        <entry key="ARABIC" value="1" />
        <entry key="IRISH" value="2" />
        <entry key="BULGARIAN" value="7" />
        <entry key="DANISH" value="2" />
        <entry key="RUSSIAN" value="2" />
        <entry key="FRENCH" value="6" />
        <entry key="HAUSA" value="1" />
        <entry key="CATALAN" value="3" />
        <entry key="CORSICAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="4" />
        <entry key="MALAGASY" value="2" />
        <entry key="MALTESE" value="1" />
        <entry key="MALAY" value="2" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="2" />
        <entry key="SOMALI" value="1" />
        <entry key="WELSH" value="11" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="SUNDANESE" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>