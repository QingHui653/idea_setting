<application>
  <component name="AppStorage">
    <histories>
      <item value="get Next Month Start Date" />
      <item value="get Month Start Date" />
      <item value="Returns the index within this string of the first occurrence of the * specified substring. * * &lt;p&gt;The returned index is the smallest value &lt;i&gt;k&lt;/i&gt; for which: * &lt;blockquote&gt;&lt;pre&gt; * this.startsWith(str, &lt;i&gt;k&lt;/i&gt;) * &lt;/pre&gt;&lt;/blockquote&gt; * If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned." />
      <item value="get Release Code" />
      <item value="command Order" />
      <item value="Delivery" />
      <item value="release Order DAO" />
      <item value="验货" />
      <item value="pre Payments Feedback" />
      <item value="purchaseOrders.saleMode != 6" />
      <item value="is Valid BST" />
      <item value="shutdown: going to close listening sockets..." />
      <item value="shutting down with code:62" />
      <item value="Access control is not enabled for the database." />
      <item value="Using the XFS filesystem is strongly recommended with the WiredTiger storage engine" />
      <item value="stash" />
      <item value="stack" />
      <item value="peek" />
      <item value="Looks at the object at the top of this stack without removing it * from the stack." />
      <item value="Removes the object at the top of this stack and returns that * object as the value of this function." />
      <item value="Index nodes represent the levels of the skip list. Note that * even though both Nodes and Indexes have forward-pointing * fields, they have different types and are handled in different * ways, that can't nicely be captured by placing field in a * shared abstract class." />
      <item value="Creates and returns a new SimpleImmutableEntry holding current * mapping if this node holds a valid value, else null. * @return new entry or null" />
      <item value="create Snapshot" />
      <item value="Returns true if this node is the header of base-level list." />
      <item value="is Base Header" />
      <item value="true if this node is header node" />
      <item value="Returns true if this node is a marker. This method isn't * actually called in any current code checking for markers * because callers will have already read value field and need * to use that read (not another done here) and so directly * test if value points to node." />
      <item value="is Marker" />
      <item value="compareAndSet head node" />
      <item value="Initializes or resets state. Needed by constructors, clone, * clear, readObject. and ConcurrentSkipListSet.clone. * (Note that comparator must be separately initialized.)" />
      <item value="azily initialized descending key set" />
      <item value="Lazily initialized descending key set" />
      <item value="Lazily initialized values collection" />
      <item value="Lazily initialized entry set" />
      <item value="Lazily initialized key set" />
      <item value="Seed for simple random number generator. Not volatile since it * doesn't matter too much if different threads don't see updates." />
      <item value="The comparator used to maintain order in this map, or null * if using natural ordering." />
      <item value="The topmost head index of the skiplist." />
      <item value="Special value used to identify base-level header" />
      <item value="BASE HEADER" />
      <item value="Generates the initial random seed for the cheaper per-instance * random number generators used in randomLevel." />
      <item value="Generator " />
      <item value="seed Generator" />
      <item value="This class implements a tree-like two-dimensionally linked skip * list in which the index levels are represented in separate * nodes from the base nodes holding data. There are two reasons * for taking this approach instead of the usual array-based * structure: 1) Array based implementations seem to encounter * more complexity and overhead 2) We can use cheaper algorithms * for the heavily-traversed index lists than can be used for the * base lists. Here's a picture of some of the basics for a * possible list with 2 levels of index:" />
      <item value="navigable" />
      <item value="descending" />
      <item value="tail" />
      <item value="&lt;p&gt;This interface is a member of the * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; * Java Collections Framework&lt;/a&gt;." />
      <item value="A {@link ConcurrentMap} supporting {@link NavigableMap} operations, * and recursively so for its navigable sub-maps." />
      <item value="Navigable" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="601" />
        <entry key="ENGLISH" value="602" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>