<application>
  <component name="AppStorage">
    <histories>
      <item value="expand Around Center" />
      <item value="stock.warehouse.vali Warehouse Type Null Tip" />
      <item value="wms Type" />
      <item value="par partner skulib" />
      <item value="Abstract Sequential List" />
      <item value="keyword Order Number" />
      <item value="[3]+&quot;/&quot;+a[4]+&quot;/&quot;+a[5]); var B = D.getFullYear()=" />
      <item value="reconciliation" />
      <item value="mch id" />
      <item value="Default: No static constructor, instead the normal constructor is public." />
      <item value="&lt;pre&gt; * public @Data(staticConstructor = &quot;of&quot;) class Point { final int x, y; } * &lt;/pre&gt; *" />
      <item value="If you specify a static constructor name, then the generated constructor will be private, and * instead a static factory method is created that other classes can use to create instances. * We suggest the name: &quot;of&quot;, like so:" />
      <item value="static Constructor" />
      <item value="Unable to locate appropriate constructor" />
      <item value="Annotation to declare finder queries directly on repository methods." />
      <item value="No converter found capable of converting from type" />
      <item value="No property string found for type PayUniformOrder!" />
      <item value="Paging And Sorting Repository" />
      <item value="Query By Example Executor" />
      <item value="count Name" />
      <item value="name" />
      <item value="native Query" />
      <item value="wsy" />
      <item value="search" />
      <item value="get Total Pages" />
      <item value="page" />
      <item value="get Total Elements" />
      <item value="is Reply" />
      <item value="btn Show" />
      <item value="table Params" />
      <item value="order" />
      <item value="refund" />
      <item value="reconciliation Refund" />
      <item value="laiyd" />
      <item value="To Match Scale" />
      <item value="Strip" />
      <item value="Immutable, arbitrary-precision signed decimal numbers. A * {@code BigDecimal} consists of an arbitrary precision integer * &lt;i&gt;unscaled value&lt;/i&gt; and a 32-bit integer &lt;i&gt;scale&lt;/i&gt;. If zero * or positive, the scale is the number of digits to the right of the * decimal point. If negative, the unscaled value of the number is * multiplied by ten to the power of the negation of the scale. The * value of the number represented by the {@code BigDecimal} is * therefore &lt;tt&gt;(unscaledValue &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;." />
      <item value="&lt;p&gt;The {@code BigDecimal} class provides operations for * arithmetic, scale manipulation, rounding, comparison, hashing, and * format conversion. The {@link #toString} method provides a * canonical representation of a {@code BigDecimal}. *" />
      <item value="Immutable, arbitrary-precision signed decimal numbers. A * {@code BigDecimal} consists of an arbitrary precision integer * &lt;i&gt;unscaled value&lt;/i&gt; and a 32-bit integer &lt;i&gt;scale&lt;/i&gt;. If zero * or positive, the scale is the number of digits to the right of the * decimal point. If negative, the unscaled value of the number is * multiplied by ten to the power of the negation of the scale. The * value of the number represented by the {@code BigDecimal} is * therefore &lt;tt&gt;(unscaledValue &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;. * * &lt;p&gt;The {@code BigDecimal} class provides operations for * arithmetic, scale manipulation, rounding, comparison, hashing, and * format conversion. The {@link #toString} method provides a * canonical representation of a {@code BigDecimal}." />
      <item value="A class used to represent multiprecision integers that makes efficient * use of allocated space by allowing a number to occupy only part of * an array so that the arrays do not have to be reallocated as often. * When performing an operation with many iterations the array used to * hold a number is only reallocated when necessary and does not have to * be the same size as the number it represents. A mutable number allows * calculations to occur on the same number without having to create * a new number for every step of the calculation as occurs with * BigIntegers." />
      <item value="Immutable objects which encapsulate the context settings which * describe certain rules for numerical operators, such as those * implemented by the {@link BigDecimal} class." />
      <item value="A simple bit sieve used for finding prime number candidates. Allows setting * and clearing of bits in a storage array. The size of the sieve is assumed to * be constant to reduce overhead. All the bits of a new bitSieve are zero, and * bits are removed from it by setting them." />
      <item value="is Export" />
      <item value="Makes available the permit for the given thread, if it * was not already available. If the thread was blocked on * {@code park} then it will unblock. Otherwise, its next call * to {@code park} is guaranteed not to block. This operation * is not guaranteed to have any effect at all if the given * thread has not been started." />
      <item value="Even though volatile, hotspot doesn't need a write barrier here." />
      <item value="&lt;p&gt;This class associates, with each thread that uses it, a permit * (in the sense of the {@link java.util.concurrent.Semaphore * Semaphore} class). A call to {@code park} will return immediately * if the permit is available, consuming it in the process; otherwise * it &lt;em&gt;may&lt;/em&gt; block. A call to {@code unpark} makes the permit * available, if it was not already available. (Unlike with Semaphores * though, permits do not accumulate. There is at most one.)" />
      <item value="Basic thread blocking primitives for creating locks and other * synchronization classes." />
      <item value="gnore interrupts while waiting" />
      <item value="&lt;dt&gt;&lt;b&gt;&lt;i&gt;Fair mode&lt;/i&gt;&lt;/b&gt; * &lt;dd&gt;When constructed as fair, threads contend for entry using an * approximately arrival-order policy. When the currently held lock * is released, either the longest-waiting single writer thread will * be assigned the write lock, or if there is a group of reader threads * waiting longer than all waiting writer threads, that group will be * assigned the read lock." />
      <item value="&lt;dt&gt;&lt;b&gt;&lt;i&gt;Non-fair mode (default)&lt;/i&gt;&lt;/b&gt; * &lt;dd&gt;When constructed as non-fair (the default), the order of entry * to the read and write lock is unspecified, subject to reentrancy * constraints. A nonfair lock that is continuously contended may * indefinitely postpone one or more reader or writer threads, but * will normally have higher throughput than a fair lock." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="404" />
        <entry key="ENGLISH" value="405" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>