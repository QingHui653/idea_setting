<application>
  <component name="AppStorage">
    <histories>
      <item value="ORDERNOTEXIST" />
      <item value="Signature" />
      <item value="check Collection" />
      <item value="query First Three Product Image" />
      <item value="Cash" />
      <item value="merge Function" />
      <item value="Allows passing an empty value" />
      <item value="allow Empty Value" />
      <item value="Specifies a reference to the corresponding type definition, overrides any other metadata specified" />
      <item value="Allows a model property to be designated as read only." />
      <item value="Allows a model property to be hidden in the Swagger model definition." />
      <item value="set Read Primary" />
      <item value="get Corporation Print Template" />
      <item value="Logic Service" />
      <item value=" Logic" />
      <item value="Debt" />
      <item value="Return {@code true} if there is a value present, otherwise {@code false}." />
      <item value="Caller Runs Policy" />
      <item value="Rejected Execution Handler" />
      <item value="Blocking Queue" />
      <item value="the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method." />
      <item value="if one of the following holds:&lt;br&gt;" />
      <item value="the handler to use when execution is blocked * because the thread bounds and queue capacities are reached" />
      <item value="work Queue" />
      <item value="thread Factory" />
      <item value="finance Flow Items" />
      <item value="Stock Finance Flow Item" />
      <item value="remove For Duplicate" />
      <item value="assist Stats Detail" />
      <item value="Field injection is not recommended less... (Ctrl+F1) Inspection info: Spring Team recommends: &quot;Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies&quot;." />
      <item value="Implicitly sets a tag for the operations, legacy support (read description).&#10;In swagger-core 1.3.X, this was used as the 'path' that is to host the API Declaration of the resource. This is no longer relevant in swagger-core 1.5.X.&#10;If tags() is not used, this value will be used to set the tag for the operations described by this resource. Otherwise, the value will be ignored.&#10;The leading / (if exists) will be removed." />
      <item value="Not used in 1.5.X, kept for legacy support." />
      <item value="saleorder finance" />
      <item value="lways use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies&quot;." />
      <item value="error Limit" />
      <item value="peek" />
      <item value="finance flow can not modify" />
      <item value="To Int Bi Function" />
      <item value="Constant for the &quot;CJK Compatibility Ideographs&quot; Unicode character * block." />
      <item value="Outlay" />
      <item value="query Customer Outlay" />
      <item value="Returns a stream consisting of the elements of this stream, sorted according to natural order. If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed. For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made. This is a stateful intermediate operation." />
      <item value="Returns a stream consisting of the elements of this stream, sorted according to natural order. If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed.&#10;For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made.&#10;This is a stateful intermediate operation." />
      <item value="先将ID排序，再分批次查询，一批100条" />
      <item value="Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.)" />
      <item value="product No" />
      <item value="ELEMENT LEVEL" />
      <item value="product Spec Element Id 3" />
      <item value="product Spec Element Id 2" />
      <item value="product Spec Element Id 1" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="953" />
        <entry key="ENGLISH" value="953" />
        <entry key="ARABIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALAGASY" value="2" />
        <entry key="MALAY" value="2" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="2" />
        <entry key="WELSH" value="11" />
        <entry key="SPANISH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>