<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="No modifications are allowed to a locked ParameterMap" />
      <item value="spec Name" />
      <item value="specification" />
      <item value="request" />
      <item value="statement" />
      <item value="The target does not implement the equals(Object) method itself." />
      <item value="The target does not implement the hashCode() method itself." />
      <item value="Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods." />
      <item value="Peter Jones" />
      <item value="create proxy instance with doPrivilege as the proxy class may // implement non-public interfaces that requires a special permission" />
      <item value="create proxy instance with doPrivilege as the proxy class may" />
      <item value="interface limit exceeded" />
      <item value="interface limit exceeded&quot;" />
      <item value="Look up or generate the designated proxy class." />
      <item value="Determine the complete set of interfaces to proxy for the given AOP configuration. * &lt;p&gt;This will always add the {@link Advised} interface unless the AdvisedSupport's * {@link AdvisedSupport#setOpaque &quot;opaque&quot;} flag is on. Always adds the * {@link org.springframework.aop.SpringProxy} marker interface." />
      <item value="&lt;p&gt;This will always add the {@link Advised} interface unless the AdvisedSupport's" />
      <item value="Determine the complete set of interfaces to proxy for the given AOP configuration." />
      <item value="Finds any {@link #equals} or {@link #hashCode} method that may be defined * on the supplied set of interfaces." />
      <item value="private void findDefinedEqualsAndHashCodeMethods(@NotNull Class&lt;?&gt;[] proxiedInterfaces) Finds any equals or hashCode method that may be defined on the supplied set of interfaces." />
      <item value="Create a new proxy according to the settings in this factory. Can be called repeatedly. Effect will vary if we've added or removed interfaces. Can add and remove interceptors. Uses the given class loader (if necessary for proxy creation)." />
      <item value="nferred annotations available:" />
      <item value="register the pointcut" />
      <item value="register the final advisor" />
      <item value="advisor" />
      <item value="configure the advisor" />
      <item value="// create instance factory definition" />
      <item value="create the method factory bean" />
      <item value="moved to" />
      <item value="as well as" />
      <item value="NamespaceHandler for the aop namespace." />
      <item value="In 2.0 XSD as well as in 2.1 XSD." />
      <item value="moved to context namespace as of 2.1" />
      <item value="Only in 2.0 XSD" />
      <item value="Loads the bean definitions via an XmlBeanDefinitionReader." />
      <item value="then proceed with actually loading the bean definitions." />
      <item value="Allow a subclass to provide custom initialization of the reader," />
      <item value="&quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;." />
      <item value="Parse the elements at the root level in the document:" />
      <item value="Propagate refresh to lifecycle processor first." />
      <item value="Publish the final event." />
      <item value="/** * Template method which can be overridden to add context-specific refresh work. * Called on initialization of special beans, before instantiation of singletons. * &lt;p&gt;This implementation is empty. * @throws BeansException in case of errors * @see #refresh() */" />
      <item value="Initialize other special beans in specific context subclasses." />
      <item value="/** * Modify the application context's internal bean factory after its standard * initialization. All bean definitions will have been loaded, but no beans * will have been instantiated yet. This allows for registering special * BeanPostProcessors etc in certain ApplicationContext implementations. * @param beanFactory the bean factory used by the application context */" />
      <item value="Allows post-processing of the bean factory in context subclasses." />
      <item value="Must generate CGLIB subclass." />
      <item value="Don't override the class with CGLIB if no overrides." />
      <item value="instantiate" />
      <item value="Trigger post-initialization callback for all applicable beans..." />
      <item value="Eagerly check singleton cache for manually registered singletons." />
      <item value="Trigger initialization of all non-lazy singleton beans..." />
    </histories>
  </component>
</application>