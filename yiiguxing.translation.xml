<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="There is insufficient memory for the Java Runtime Environment to continue. # Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory. # An error report file with more information is saved as: # /opt/elasticsearch/hs_err_pid74.log" />
      <item value="Starting Elasticsearch Server OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c5330000, 986513408, 0) failed; error='Cannot allocate memory' (errno=12)" />
      <item value="Lombok Requires Annotation Processing Annotation processing seems to be disabled for the project &quot;oms&quot;. For the plugin to function correctly, please enable it under" />
      <item value="Declared" />
      <item value="highest One Bit" />
      <item value="Handle sign, if present" />
      <item value="Maximum array size is Integer.MAX_VALUE" />
      <item value="high value may be configured by property" />
      <item value="size Table" />
      <item value="Digit Ones" />
      <item value="Digit Tens" />
      <item value="Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as toString." />
      <item value="Returns the number of zero bits preceding the highest-order (&quot;leftmost&quot;) one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive int values x: floor(log2(x)) = 31 - numberOfLeadingZeros(x) ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)" />
      <item value="HD, Figure 5-6" />
      <item value="Illegal shift value" />
      <item value="Unsigned" />
      <item value="Octal" />
      <item value="Convert the integer to an unsigned number." />
      <item value="Hex" />
      <item value="the radix to use in the string representation" />
      <item value="an integer to be converted to a string." />
      <item value="Requires positive x" />
      <item value="negative" />
      <item value="Use the faster version" />
      <item value="Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus character '-' ('\u002D'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: 0123456789abcdefghijklmnopqrstuvwxyz These are '\u0030' through '\u0039' and '\u0061' through '\u007A'. If radix is N, then the first N of these characters are used as radix-N digits in the order shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If uppercase letters are desired, the String.toUpperCase() method may be called on the result: Integer.toString(n, 16).toUpperCase()" />
      <item value="All possible chars for representing a number as a String" />
      <item value="digits" />
      <item value="get Primitive Class" />
      <item value="The Class instance representing the primitive type int." />
      <item value="Authorization" />
      <item value="avoid getfield opcode" />
      <item value="/** * Concatenates the specified string to the end of this string. * &lt;p&gt; * If the length of the argument string is &lt;code&gt;0&lt;/code&gt;, then this * &lt;code&gt;String&lt;/code&gt; object is returned. Otherwise, a new * &lt;code&gt;String&lt;/code&gt; object is created, representing a character * sequence that is the concatenation of the character sequence * represented by this &lt;code&gt;String&lt;/code&gt; object and the character * sequence represented by the argument string.&lt;p&gt; * Examples: * &lt;blockquote&gt;&lt;pre&gt; * &quot;cares&quot;.concat(&quot;s&quot;) returns &quot;caress&quot; * &quot;to&quot;.concat(&quot;get&quot;).concat(&quot;her&quot;) returns &quot;together&quot; * &lt;/pre&gt;&lt;/blockquote&gt; * * @param str the &lt;code&gt;String&lt;/code&gt; that is concatenated to the end * of this &lt;code&gt;String&lt;/code&gt;. * @return a string that represents the concatenation of this object's * characters followed by the string argument's characters." />
      <item value="sub Sequence" />
      <item value="Returns the index within this string of the first occurrence of the * specified substring." />
      <item value="Handles (rare) calls of lastIndexOf with a supplementary character." />
      <item value="Returns the index within this string of the last occurrence of the specified character. For values of ch in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: this.charAt(k) == ch is true. For other values of ch, it is the largest value k such that: this.codePointAt(k) == ch is true. In either case, if no such character occurs in this string, then -1 is returned. The String is searched backwards starting at the last character." />
      <item value="Handles (rare) calls of indexOf with a supplementary character." />
      <item value="Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. There is some nonnegative integer k less than len such that: this.charAt(toffset+k) != other.charAt(ooffset+k)" />
      <item value="No overflow because of numeric promotion" />
      <item value="equals Ignore Case" />
      <item value="Argument is a StringBuffer, StringBuilder" />
      <item value="content Equals" />
      <item value="content" />
      <item value="handle most cases here (ch is a BMP code point or a // negative value (invalid code point))" />
      <item value="Note: toffset might be near -1&gt;&gt;&gt;1." />
      <item value="pa" />
      <item value="Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length() - 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned." />
      <item value="/* Common private utility method used to bounds check the byte array * and requested offset &amp; length values used by the String(byte[],..) * constructors. */" />
      <item value="rotate Right" />
      <item value="Returns the value obtained by reversing the order of the bits in the * two's complement binary representation of the specified {@code int} * value." />
    </histories>
  </component>
</application>