<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="has Introductions" />
      <item value="find Advisors That Can Apply" />
      <item value="found Aspect J Advice" />
      <item value="Eligible" />
      <item value="find Eligible Advisors" />
      <item value="candidate Advisors" />
      <item value="candidate" />
      <item value="Find all candidate Advisors to use in auto-proxying." />
      <item value="get Advices And Advisors For Bean" />
      <item value="Create proxy if we have advice." />
      <item value="advisor" />
      <item value="0" />
      <item value="Unit" />
      <item value="Volume" />
      <item value="Wrap the given bean if necessary, i.e. if it is eligible for being proxied." />
      <item value="/** * {@link org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator} * subclass that exposes AspectJ's invocation context and understands AspectJ's rules * for advice precedence when multiple pieces of advice come from the same aspect. *" />
      <item value="Bean Component" />
      <item value="pop" />
      <item value="register the final advisor" />
      <item value="register the pointcut" />
      <item value="configure the advisor" />
      <item value="create instance factory definition" />
      <item value="create the method factory bean" />
      <item value="advice Found Already" />
      <item value="We have to parse &quot;advice&quot; and all the advice kinds in one loop, to get the // ordering semantics right." />
      <item value="advice" />
      <item value="We have to parse &quot;advice&quot; and all the advice kinds in one loop, to get the" />
      <item value="Stack" />
      <item value="State" />
      <item value="/** * Simple {@link Stack}-based structure for tracking the logical position during * a parsing process. {@link Entry entries} are added to the stack at * each point during the parse phase in a reader-specific manner. * * &lt;p&gt;Calling {@link #toString()} will render a tree-style view of the current logical * position in the parse phase. This representation is intended for use in * error messages. * * @author Rob Harrop * @since 2.0 */" />
      <item value="use Class Proxying If Necessary" />
      <item value="/** * Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions} * created by the '{@code &lt;aop:config/&gt;}' tag. Will force class proxying if the * '{@code proxy-target-class}' attribute is set to '{@code true}'. * @see AopNamespaceUtils */" />
      <item value="composite Def" />
      <item value="parser Context" />
      <item value="nested Components" />
      <item value="{@link ComponentDefinition} instances, aggregating them into a named group * of components." />
      <item value="{@link ComponentDefinition} implementation that holds one or more nested" />
      <item value="Composite Component Definition" />
      <item value="/** * Register the {@link BeanDefinitionParser BeanDefinitionParsers} for the * '{@code config}', '{@code spring-configured}', '{@code aspectj-autoproxy}' * and '{@code scoped-proxy}' tags. */" />
      <item value="Only in 2.0 XSD: moved to context namespace as of 2.1" />
      <item value="In 2.0 XSD as well as in 2.1 XSD." />
      <item value="&lt;![CDATA[ A section (compartmentalization) of AOP-specific configuration (including aspects, pointcuts, etc)." />
      <item value="Loads the bean definitions via an XmlBeanDefinitionReader." />
      <item value="Initialize any placeholder property sources in the context environment" />
      <item value="load Bean Definitions" />
      <item value="Tell the subclass to refresh the internal bean factory." />
      <item value="parse Custom Element" />
      <item value="parse Default Element" />
      <item value="Parse the elements at the root level in the document: * &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;. * @param root the DOM root element of the document" />
      <item value="Create a new XmlBeanDefinitionReader for the given BeanFactory." />
    </histories>
  </component>
</application>