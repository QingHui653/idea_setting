<application>
  <component name="AppStorage">
    <histories>
      <item value="setText signature: (Ljava/lang/String;)V) Illegal instruction found at offset 1" />
      <item value="has Cycle" />
      <item value="digest" />
      <item value="Retry-able exception received" />
      <item value="elastic" />
      <item value="MATERIAL METHOD" />
      <item value="measure Unit" />
      <item value="transactions" />
      <item value="REPETITIONS" />
      <item value="QTY" />
      <item value="Simulates some external resource that can only be access by one process at a time" />
      <item value="the given path for the node" />
      <item value="This callback is used to retrieve the name and stat of the node." />
      <item value="Connection Loss" />
      <item value="Keeper Error Code" />
      <item value="block Until Connected" />
      <item value="No Such Method Error" />
      <item value="This plugin lets you download and build Docker images, create and start Docker containers, and carry out other related tasks. Documentation" />
      <item value="shift" />
      <item value="WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine" />
      <item value="booked Amount" />
      <item value="outbound Num" />
      <item value="purchase Num" />
      <item value="m Inventory" />
      <item value="canbe Book Num" />
      <item value="Booked Amount" />
      <item value="Purchase Num" />
      <item value="Outbound Num" />
      <item value="surefire" />
      <item value="Start fixup at replacement node, if it exists." />
      <item value="Returns the successor of the specified Entry, or null if no such." />
      <item value="Delete node p, and then rebalance the tree." />
      <item value="If strictly internal, copy successor's element to p and then make p" />
      <item value="point to successor." />
      <item value="No children. Use self as phantom replacement and unlink." />
      <item value="return if we are the only node." />
      <item value="Link replacement to parent" />
      <item value="successor" />
      <item value="// If strictly internal, copy successor's element to p and then make p // point to successor." />
      <item value="p has 2 children" />
      <item value="Offload comparator-based version for sake of performance" />
      <item value="invalid or incomplete tag" />
      <item value="Fix replacement" />
      <item value="type (and possibly null) check" />
      <item value="company Id Elem" />
      <item value="bucunzaide" />
      <item value="Acquires the lock unless the current thread is interrupted. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The lock is acquired by the current thread; or Some other thread interrupts the current thread. If the lock is acquired by the current thread then the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is interrupted while acquiring the lock, then InterruptedException is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock." />
      <item value="Acquires the lock unless the current thread is interrupted.&#10;Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one.&#10;If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately.&#10;If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:&#10;The lock is acquired by the current thread; or&#10;Some other thread interrupts the current thread.&#10;If the lock is acquired by the current thread then the lock hold count is set to one.&#10;If the current thread:&#10;has its interrupted status set on entry to this method; or&#10;is interrupted while acquiring the lock,&#10;then InterruptedException is thrown and the current thread's interrupted status is cleared.&#10;In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock." />
      <item value="Number of elements in the queue" />
      <item value="Causes the current thread to wait until it is signalled or interrupted. The lock associated with this Condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes the signal method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or A &quot;spurious wakeup&quot; occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal. In that case the implementation must ensure that the signal is redirected to another waiting thread, if there is one." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="60" />
        <entry key="ENGLISH" value="61" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>