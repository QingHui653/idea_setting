<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="Allow post-processors to modify the merged bean definition." />
      <item value="Instantiate the bean." />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="/** * Apply the given property values, resolving any runtime references * to other beans in this bean factory. * Must use deep copy, so we don't permanently modify this property * @param bw BeanWrapper wrapping the target object * @param pvs new property values * @param name bean name passed for better exception information * @param newlyCreatedBeans cache with newly created beans (name, instance) * if triggered by the creation of another bean, or null else * (necessary to resolve circular references) */" />
      <item value="cache new instance to be able resolve circular references" />
      <item value="Don't override the class with CGLIB if no overrides." />
      <item value="No special handling: simply use no-arg constructor." />
      <item value="Eagerly check singleton cache for manually registered singletons." />
      <item value="Given a bean wrapper, add listeners" />
      <item value="/** * Return the bean with the given name, * checking the parent bean factory if not found. * @param name name of the bean to retrieve * @param newlyCreatedBeans cache with newly created beans (name, instance) * if triggered by the creation of another bean, or null else * (necessary to resolve circular references) */" />
      <item value="Return the bean with the given name," />
      <item value="Return the bean with the given name, * checking the parent bean factory if not found." />
      <item value="Try to find the bean instance in the hierarchy." />
      <item value="/** * All bean instantiation within this class is performed by this method. * Return a BeanWrapper object for a new instance of this bean. * First look up BeanDefinition for the given bean name. * Uses recursion to support instance &quot;inheritance&quot;. */" />
      <item value="Set our property values" />
      <item value="Child Bean Definition" />
      <item value="Root Bean Definition" />
      <item value="Instance" />
      <item value="Shared" />
      <item value="SharedInstance(name, newlyCreatedBeans) : createBean(name, newlyCreatedBeans); }" />
      <item value="Invoke the setApplicationContext() callback on all objects * in the context. This involves instantiating the objects. * Only singletons will be instantiated eagerly. */" />
      <item value="/** * Convenience method to return a String array as a delimited (e.g. CSV) * String. Useful for toString() implementations * @param arr array to display. Elements may be of any type (toString() will be * called on each element). * @param delim delimiter to use (probably a ,) */" />
      <item value="Bean Definition" />
      <item value="Definition" />
      <item value="/** * Invoke the setApplicationContext() callback on all objects * in the context. This involves instantiating the objects. * Only singletons will be instantiated eagerly. */" />
      <item value="/** * Initialize the config location for the current namespace. * This can be overridden in subclasses for custom config lookup. * &lt;p&gt;Default implementation returns the namespace with the default prefix * &quot;WEB-INF/&quot; and suffix &quot;.xml&quot;, if a namespace is set. For the root context, * the &quot;configLocation&quot; servlet context parameter is used, falling back to * &quot;WEB-INF/applicationContext.xml&quot; if no parameter is found. * @return the URL or path of the configuration to use */" />
      <item value="Initialize the theme capability." />
      <item value="Subclasses must implement this method to perform the actual configuration load." />
      <item value="/** * Callback method which can be overridden to add context-specific refresh work. * @throws ApplicationContextException in case of errors during refresh */" />
      <item value="Add beans that implement listener as listeners. * Doesn't affect other listeners, that can be added without being beans." />
      <item value="Loads the bean definitions via an XmlBeanDefinitionReader." />
      <item value="org.springframework.web.context.WebApplicationContext implementation which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader. This is essentially the equivalent of org.springframework.context.support.GenericXmlApplicationContext for a web environment. By default, the configuration will be taken from &quot;/WEB-INF/applicationContext.xml&quot; for the root context, and &quot;/WEB-INF/test-servlet.xml&quot; for a context with the namespace &quot;test-servlet&quot; (like for a DispatcherServlet instance with the servlet-name &quot;test&quot;). The config location defaults can be overridden via the &quot;contextConfigLocation&quot; context-param of org.springframework.web.context.ContextLoader and servlet init-param of org.springframework.web.servlet.FrameworkServlet. Config locations can either denote concrete files like &quot;/WEB-INF/context.xml&quot; or Ant-style patterns like &quot;/WEB-INF/*-context.xml&quot; (see org.springframework.util.PathMatcher javadoc for pattern details). Note: In case of multiple config locations, later bean definitions will override ones defined in earlier loaded files. This can be leveraged to deliberately override certain bean definitions via an extra XML file. For a WebApplicationContext that reads in a different bean definition format, create an analogous subclass of AbstractRefreshableWebApplicationContext. Such a context implementation can be specified as &quot;contextClass&quot; context-param for ContextLoader or &quot;contextClass&quot; init-param for FrameworkServlet." />
      <item value="if the configuration was invalid or couldn't be found, or if configuration has already been loaded and reloading is forbidden DYNAMIC CLASSLOADER ISSUE...subclass to get classloader!?" />
      <item value="Load or reload configuration." />
      <item value="Exception thrown during application context initialization." />
      <item value="if the configuration was invalid or couldn't * be found, or if configuration has already been loaded and reloading is forbidden * DYNAMIC CLASSLOADER ISSUE...subclass to get classloader!?" />
      <item value="** * Return a friendly name for context * @return a display name for the context */" />
      <item value="/** * To avoid endless constructor chaining, only concrete classes * take this in their constructor, and then invoke this method */" />
      <item value="Let subclasses do whatever initialization they like" />
      <item value="&lt;!-- - Maps the petclinic dispatcher to *.htm. All handler mappings in - petclinic-servlet.xml will by default be applied to this subpath. - If a mapping isn't a /* subpath, the handler mappings are considered - relative to the web app root. - - A single dispatcher could get mapped to multiple paths, like any servlet. --&gt;" />
      <item value="Render the given ModelAndView. This is the last stage in handling a request. * It may involve resolving the view by name." />
      <item value="direct evaluation instead of Integer.compareTo to avoid unnecessary object creation" />
      <item value="We keep HandlerMappings in sorted order" />
      <item value="/** * Initialize the HandlerMappings used by this class. * If no HandlerMapping beans are defined in the BeanFactory * for this namespace, we default to a BeanNameUrlHandlerMapping. */" />
      <item value="// We tried and failed to load the ThemeResolver specified by a bean" />
      <item value="Overridden method, invoked after any bean properties have been set and the * WebApplicationContext and BeanFactory for this namespace is available. * &lt;p&gt;Loads HandlerMapping and HandlerAdapter objects, and configures a * ViewResolver and a LocaleResolver. */" />
      <item value="Request attribute to hold current theme, retrievable by views." />
      <item value="Request attribute to hold current locale, retrievable by views." />
      <item value="Request attribute to hold current web application context. * Otherwise only the global web app context is obtainable by tags etc. */" />
      <item value="Well-known name for the ViewResolver object in the bean factory for * this namespace. */" />
    </histories>
  </component>
</application>